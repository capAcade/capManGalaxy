/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/capmanhighscore/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/capmanhighscore/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/js/main.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/js/enterName.js\":\n/*!*****************************!*\\\n  !*** ./src/js/enterName.js ***!\n  \\*****************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return EnterName; });\\nlet blinkTimer = 0;\\r\\nlet blinkVelocity = 20;\\r\\nlet timer = 0;\\r\\nconst menuVelocity = 20;\\r\\n\\r\\nconst handleInput = (context) => {\\r\\n    \\r\\n    timer--;\\r\\n    if (context.keys.down.isDown && timer<=0) {\\r\\n        context.activeCharacter = context.activeCharacter +1\\r\\n        if(context.activeCharacter > 90){\\r\\n            context.activeCharacter = 90;\\r\\n        }\\r\\n        timer=menuVelocity;\\r\\n    } else if (context.keys.up.isDown && timer<=0) {\\r\\n        context.activeCharacter = context.activeCharacter -1\\r\\n        if(context.activeCharacter < 65){\\r\\n            context.activeCharacter = 65;\\r\\n        }\\r\\n        timer = menuVelocity;\\r\\n    }\\r\\n    else if (context.keys.right.isDown && timer<=0) {\\r\\n        if(context.letters.length -1 <= context.activeLetter){\\r\\n            context.letters.push(context.game.add.text(context.game.world.centerX -157+((context.activeLetter+1)*28), context.game.world.centerY, 'A', { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" }))\\r\\n            context.letters[context.activeLetter +1].anchor.set(0.5);\\r\\n            context.letters[context.activeLetter +1].stroke = '#26D8D7';\\r\\n            context.letters[context.activeLetter +1].strokeThickness = 6;\\r\\n        }\\r\\n        context.activeLetter = context.activeLetter +1\\r\\n        timer=menuVelocity;\\r\\n    } \\r\\n    else if (context.keys.left.isDown && timer<=0) {\\r\\n        context.activeLetter = context.activeLetter -1\\r\\n        if(context.activeLetter < 0) {\\r\\n            context.activeLetter = 0\\r\\n        }\\r\\n\\r\\n        timer=menuVelocity;\\r\\n        \\r\\n    } \\r\\n    else if (context.keys.fire.isDown && timer<=0) {\\r\\n        //context.cb(context.config.buttons[context.selectedButton]);\\r\\n        let name='';\\r\\n        context.letters.forEach((letter, index)=>{\\r\\n            name = name+ letter._text;\\r\\n        });\\r\\n        context.score.saveNewScore(name, context.playerScore)\\r\\n        if(typeof context.cb === 'function'){\\r\\n            context.cb();\\r\\n        }\\r\\n        if(typeof context.initCB === 'function'){\\r\\n            context.initCB();\\r\\n        }\\r\\n        timer=menuVelocity;\\r\\n        \\r\\n    }  \\r\\n    else {\\r\\n        //timer--;\\r\\n        //console.log('keypressisstoped')\\r\\n    }\\r\\n };\\r\\n\\r\\nclass EnterName {\\r\\n    constructor(config, cb) {\\r\\n        this.config = config;\\r\\n        this.cb = cb;\\r\\n        this.selectedButton = 0;\\r\\n    }\\r\\n    preload() {\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            this.game.load.image('bg', this.config.background);\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            this.game.load.image('logo', this.config.logo);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    init(score, playerScore, initCB) {\\r\\n        this.game.renderer.renderSession.roundPixels = true;\\r\\n        this.keys = this.game.input.keyboard.addKeys({\\r\\n            left: Phaser.KeyCode.LEFT,\\r\\n            right: Phaser.KeyCode.RIGHT,\\r\\n            up: Phaser.KeyCode.UP,\\r\\n            down: Phaser.KeyCode.DOWN,\\r\\n            fire: Phaser.KeyCode.CONTROL\\r\\n        });\\r\\n        this.score = score;\\r\\n        this.playerScore = playerScore;\\r\\n        this.initCB = initCB;\\r\\n    }\\r\\n    create() {\\r\\n        this.game.stage.backgroundColor = '#000033';\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            let bg = this.game.add.image(0, 0, 'bg');\\r\\n            bg.height = this.game.height;\\r\\n            bg.width = this.game.width;\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            let logo = this.game.add.image(this.game.world.centerX, this.game.world.centerY -400, 'logo');\\r\\n            logo.anchor.set(0.5);\\r\\n        }\\r\\n\\r\\n        let style = { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" };\\r\\n        let offSet = 0;\\r\\n\\r\\n        this.eyn = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'Enter you name', style);\\r\\n        this.eyn.anchor.set(0.5);\\r\\n        this.eyn.stroke = '#26D8D7';\\r\\n        this.eyn.strokeThickness = 6;\\r\\n\\r\\n        this.eyn = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 300, `Your score = ${this.playerScore}`, style);\\r\\n        this.eyn.anchor.set(0.5);\\r\\n        this.eyn.stroke = '#26D8D7';\\r\\n        this.eyn.strokeThickness = 6;\\r\\n\\r\\n        this.activeLetter = 0;\\r\\n        this.activeCharacter = 65\\r\\n        this.letters = [this.game.add.text(this.game.world.centerX -157, this.game.world.centerY, 'A', style)];\\r\\n        this.letters[0].anchor.set(0.5);\\r\\n        this.letters[0].stroke = '#26D8D7';\\r\\n        this.letters[0].strokeThickness = 6;\\r\\n\\r\\n    }\\r\\n    update () {\\r\\n        handleInput(this);\\r\\n        this.letters[this.activeLetter].text = String.fromCharCode(this.activeCharacter);\\r\\n        blinkTimer++\\r\\n        if(blinkTimer >= blinkVelocity){\\r\\n            this.letters[this.activeLetter].visible = !this.letters[this.activeLetter].visible;\\r\\n            blinkTimer = 0;\\r\\n        }\\r\\n        this.letters.forEach((letter, index)=>{\\r\\n            if(index !== this.activeLetter){\\r\\n                letter.visible = true;\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/enterName.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/main.js\":\n/*!************************!*\\\n  !*** ./src/js/main.js ***!\n  \\************************/\n/*! exports provided: ScoreController, ShowScore, EnterName */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _scoreController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scoreController */ \\\"./src/js/scoreController.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"ScoreController\\\", function() { return _scoreController__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"]; });\\n\\n/* harmony import */ var _showScore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./showScore */ \\\"./src/js/showScore.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"ShowScore\\\", function() { return _showScore__WEBPACK_IMPORTED_MODULE_1__[\\\"default\\\"]; });\\n\\n/* harmony import */ var _enterName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enterName */ \\\"./src/js/enterName.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"EnterName\\\", function() { return _enterName__WEBPACK_IMPORTED_MODULE_2__[\\\"default\\\"]; });\\n\\n// this is the bundle where all the utility classes are combined so that you are able to get\\r\\n// all the classes just with one file from the node module\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/main.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/scoreController.js\":\n/*!***********************************!*\\\n  !*** ./src/js/scoreController.js ***!\n  \\***********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return scoreConroller; });\\nconst mockScore = [\\r\\n    {\\r\\n        name: 'Capgemini',\\r\\n        score: 999\\r\\n    },\\r\\n        {\\r\\n        name: 'sogeti',\\r\\n        score: 888\\r\\n    },\\r\\n    {\\r\\n        name: 'backelite',\\r\\n        score: 777\\r\\n    },\\r\\n    {\\r\\n        name: 'blue harvest',\\r\\n        score: 666\\r\\n    },\\r\\n    {\\r\\n        name: 'farenheit',\\r\\n        score: 555\\r\\n    },\\r\\n    {\\r\\n        name: 'idin',\\r\\n        score: 444\\r\\n    },\\r\\n    {\\r\\n        name: 'gettronics',\\r\\n        score: 333\\r\\n    },\\r\\n    {\\r\\n        name: 'KPN',\\r\\n        score: 222\\r\\n    },\\r\\n    {\\r\\n        name: 'infosys',\\r\\n        score: 112\\r\\n    },\\r\\n    {\\r\\n        name: 'TCS',\\r\\n        score: 111\\r\\n    }\\r\\n];\\r\\n//#TODO change capmanGameScore an object makes live easier... capmanGameScore.[gameName]\\r\\nconst getCapManGameScoreCoockie = () =>{\\r\\n    var out;\\r\\n    try {\\r\\n        out = JSON.parse(document.cookie).capManGameScore;\\r\\n    } catch {\\r\\n        out = [];\\r\\n    }\\r\\n    return out || [];\\r\\n}\\r\\n\\r\\nconst getGameScoreFromCookie = (name) =>{\\r\\n    return getCapManGameScoreCoockie().filter((game)=>{\\r\\n        return game.name === name;\\r\\n    })[0];\\r\\n}\\r\\n\\r\\nconst getIndexOfGame = (name) => {\\r\\n    return getCapManGameScoreCoockie().findIndex((element)=>{\\r\\n        return element.name === name;\\r\\n    });\\r\\n}\\r\\n\\r\\nconst setGameScoreToCookie = (ranking, gameName) =>{\\r\\n    let out = getCapManGameScoreCoockie();\\r\\n    let gameIndex = getIndexOfGame(gameName);\\r\\n    if(gameIndex !== -1){\\r\\n        out[gameIndex].ranking = ranking;\\r\\n    } else {\\r\\n        out.push({\\r\\n            name: gameName,\\r\\n            ranking: ranking\\r\\n        })\\r\\n    }\\r\\n    document.cookie = JSON.stringify({capManGameScore: out});\\r\\n}\\r\\n\\r\\nconst getRankPositionIndex = (score, rankList) =>{\\r\\n    return rankList.findIndex((element)=>{\\r\\n        return element.score < score;\\r\\n    });\\r\\n}\\r\\n\\r\\nclass scoreConroller{\\r\\n    constructor(game) {\\r\\n        this.name = game.name;\\r\\n\\r\\n        //Check if there is already some scoring if not we create mock score\\r\\n        if(getGameScoreFromCookie(this.name)){\\r\\n            this.ranking = getGameScoreFromCookie(this.name).ranking || mockScore;\\r\\n        } else {\\r\\n            this.ranking = mockScore;\\r\\n        }\\r\\n    }\\r\\n    saveNewScore(playerName, score){\\r\\n        if(this.isScoreMoreThenLast) {\\r\\n            this.ranking.splice(getRankPositionIndex(score, this.ranking), 0, {\\r\\n                name: playerName, \\r\\n                score: score})\\r\\n            this.ranking.splice(10, 1);\\r\\n            setGameScoreToCookie(this.ranking, this.name);\\r\\n        }\\r\\n    }\\r\\n    isScoreMoreThenLast(score){\\r\\n        return this.ranking[this.ranking.length -1].score < score;\\r\\n    }\\r\\n}\\n\\n//# sourceURL=webpack://someLibName/./src/js/scoreController.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/showScore.js\":\n/*!*****************************!*\\\n  !*** ./src/js/showScore.js ***!\n  \\*****************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return ShowScore; });\\nlet blinkTimer = 0;\\r\\nlet blinkVelocity = 30;\\r\\n\\r\\nconst handleInput = (context) => {\\r\\n    \\r\\n    if (context.keys.fire.isDown) {\\r\\n        context.cb();\\r\\n    }  \\r\\n\\r\\n };\\r\\n\\r\\nclass ShowScore {\\r\\n    constructor(config, cb) {\\r\\n        this.config = config;\\r\\n        this.cb = cb;\\r\\n        this.selectedButton = 0;\\r\\n    }\\r\\n    preload() {\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            this.game.load.image('bg', this.config.background);\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            this.game.load.image('logo', this.config.logo);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    init(score) {\\r\\n        this.game.renderer.renderSession.roundPixels = true;\\r\\n        this.keys = this.game.input.keyboard.addKeys({\\r\\n            fire: Phaser.KeyCode.CONTROL\\r\\n        });\\r\\n        this.score = score;\\r\\n    }\\r\\n    create() {\\r\\n        this.game.stage.backgroundColor = '#000033';\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            let bg = this.game.add.image(0, 0, 'bg');\\r\\n            bg.height = this.game.height;\\r\\n            bg.width = this.game.width;\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            let logo = this.game.add.image(this.game.world.centerX, this.game.world.centerY -400, 'logo');\\r\\n            logo.anchor.set(0.5);\\r\\n        }\\r\\n\\r\\n        let style = { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" };\\r\\n        let offSet = 0;\\r\\n\\r\\n        this._rankings = this.score.ranking.map((rank)=>{\\r\\n            let name = this.game.add.text(150, 250 + offSet, rank.name, style);\\r\\n            name.stroke = '#26D8D7';\\r\\n            name.strokeThickness = 6;\\r\\n\\r\\n            let score = this.game.add.text(950, 250 + offSet, rank.score, style);\\r\\n            score.stroke = '#26D8D7';\\r\\n            score.strokeThickness = 6;\\r\\n\\r\\n\\r\\n            offSet = offSet + 70;\\r\\n            return {name: name, score: score}\\r\\n        });\\r\\n\\r\\n        this.goBack = this.game.add.text(this.game.world.centerX, this.game.world.centerY +450, '- Hit fire to go back -', style);\\r\\n        this.goBack.anchor.set(0.5);\\r\\n        this.goBack.stroke = '#26D8D7';\\r\\n        this.goBack.strokeThickness = 6;\\r\\n    }\\r\\n    update () {\\r\\n        handleInput(this);\\r\\n        blinkTimer++\\r\\n        if(blinkTimer >= blinkVelocity){\\r\\n            this.goBack.visible = !this.goBack.visible;\\r\\n            blinkTimer = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/showScore.js?\");\n\n/***/ })\n\n/******/ });\n});\n\n//# sourceURL=webpack:///./node_modules/capmanhighscore/dist/index.js?");

/***/ }),

/***/ "./src/js/characters/boss.js":
/*!***********************************!*\
  !*** ./src/js/characters/boss.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Boss; });\nconst fireLocations = [\n    {\n        x:275,\n        y:1024\n    },\n    {\n        x:550,\n        y:1024\n    },\n    {\n        x:825,\n        y:1024\n    },\n    {\n        x:1100,\n        y:1024\n    }\n]\n\nclass Boss extends Phaser.Sprite {\n    constructor(game, halfLifeInterventionCB) {\n        super(game, 200, 200, 'boss1');\n        this.game = game;\n        this.tween = game.add.tween(this).to( { x: 800 }, 4000, Phaser.Easing.Linear.None, true, 0, 1000, true);\n        game.physics.enable(this, Phaser.Physics.ARCADE);\n        this.firingTimer = game.time.now + 4000\n        this.health = 10;\n        this.halfLifeIntervention = 5;\n        this.halfLifeInterventionCB = halfLifeInterventionCB;\n\n        this.bullets = this.game.add.group();\n        this.bullets.enableBody = true;\n        this.bullets.physicsBodyType = Phaser.Physics.ARCADE;\n        this.bullets.createMultiple(60, 'enemyBullet');\n        this.bullets.setAll('anchor.x', 0.5);\n        this.bullets.setAll('anchor.y', 1);\n        this.bullets.setAll('outOfBoundsKill', true);\n        this.bullets.setAll('checkWorldBounds', true);\n    }\n    bossFire(){\n        //  Grab the first bullet we can from the pool\n        fireLocations.forEach((location)=>{\n            let bullet = this.bullets.getFirstExists(false);\n            bullet.reset(this.body.center.x, this.body.center.y);\n            this.game.physics.arcade.moveToXY(bullet,location.x + this.game.rnd.integerInRange(0,100),location.y, 120);\n        })\n\n        this.firingTimer = this.game.time.now + this.game.rnd.integerInRange(300,5000);\n    }\n    update(){\n        if (this.game.time.now > this.firingTimer && this.alive) {\n            this.bossFire();\n        }\n    }\n}\n\n//# sourceURL=webpack:///./src/js/characters/boss.js?");

/***/ }),

/***/ "./src/js/characters/hero.js":
/*!***********************************!*\
  !*** ./src/js/characters/hero.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Hero; });\nconst getDefaultSettings = function(game){\n    return {\n        ship: 'ship1',\n        player: 'one',\n        positionHUD: 'left',\n        lives: 3,\n        spawnPosition: {\n            x: 640,\n            y: 900\n        },\n        keys: game.input.keyboard.addKeys({\n            left: Phaser.KeyCode.LEFT,\n            right: Phaser.KeyCode.RIGHT,\n            fire: Phaser.KeyCode.CONTROL\n        })\n    };\n}\n\nclass Hero extends Phaser.Sprite {\n    constructor(game, settings = getDefaultSettings(game)) {\n        super(game, settings.spawnPosition.x, settings.spawnPosition.y, settings.ship);\n        this.settings = settings\n        this.score = 0;\n        this.scale.setTo(0.30, 0.30);\n        this.anchor.setTo(0.5, 0.5);\n        this.hasShield = false;\n        this.hasPowerUp = false;\n        this.powerUpTime;\n        \n        game.physics.enable(this, Phaser.Physics.ARCADE);\n        this.body.collideWorldBounds = true;\n\n        this.lives = game.add.group();\n        this.bulletTime= 0;\n        \n        //give hero random color tint\n       // this.tint = Math.floor(Math.random() * 1000) * 0xffffff;\n        \n        //  Our bullet group\n        this.bullets = game.add.group();\n        this.bullets.enableBody = true;\n        this.bullets.physicsBodyType = Phaser.Physics.ARCADE;\n        this.bullets.createMultiple(30, 'bullet');\n        this.bullets.setAll('anchor.x', 0.5);\n        this.bullets.setAll('anchor.y', 1);\n        this.bullets.setAll('outOfBoundsKill', true);\n        this.bullets.setAll('checkWorldBounds', true);\n\n        //this.alive = true\n        this.createLives(settings.lives);\n    }\n    update(){\n        if(this.powerUpTime < this.game.time.now){\n            this.hasPowerUp = false; \n        }\n        if (this.alive)\n        {\n            //  Reset the player, then check for movement keys\n            this.body.velocity.setTo(0, 0);\n    \n            if (this.settings.keys.left.isDown)\n            {\n                this.body.velocity.x = -200;\n            }\n            else if (this.settings.keys.right.isDown)\n            {\n                this.body.velocity.x = 200;\n            }\n\n            //  Firing?\n            if (this.settings.keys.fire.isDown)\n            {\n                this.fireBullet();\n            }\n\n\n            if(this.hasShield && this.shieldTimer < this.game.time.now){\n                this.hasShield = false;\n                this.tint = 0xffffff;\n            }\n\n            this.nicknameText.text = this.game._nickname;\n        }\n    }\n    createLives(amount = 0 ){\n        if(this.settings.positionHUD === 'left'){\n            this.scoreText = this.game.add.text(10, 10, `Score: ${this.score}`, { font: '34px Arial', fill: '#fff' });\n            this.nicknameText = this.game.add.text(this.game.world.width/2, 10, `${this.game._nickname}`, { font: '34px Arial', fill: '#fff' });\n            this.statusText = this.game.add.text(10, 60, ``, { font: '34px Arial', fill: '#fff' });\n        }else{\n            this.scoreText = this.game.add.text(this.game.world.width - 230, 10, `Score: ${this.score}`, { font: '34px Arial', fill: '#fff' });\n            this.nicknameText = this.game.add.text(this.game.world.width/2, 10, `${this.game._nickname}`, { font: '34px Arial', fill: '#fff' });\n            this.statusText = this.game.add.text(this.game.world.width - 230, 60, ``, { font: '34px Arial', fill: '#fff' });\n        }\n\n        for (var i = 0; i < amount; i++) \n        {\n            let ship;\n            if(this.settings.positionHUD === 'left'){\n                ship = this.lives.create(30 + (30 * i), 80, this.settings.ship);\n            } else {\n                ship = this.lives.create(this.game.world.width - 100 + (30 * i), 60, this.settings.ship);\n            }\n            \n            ship.scale.setTo(0.15, 0.15);\n            ship.anchor.setTo(0.5, 0.5);\n            ship.angle = 90;\n            ship.alpha = 0.4;\n        }\n    }\n    fireBullet(){\n        //  To avoid them being allowed to fire too fast we set a time limit\n        if (this.game.time.now > this.bulletTime)\n        {\n            //  Grab the first bullet we can from the pool\n            let bullet = this.bullets.getFirstExists(false);\n\n            if (bullet)\n            {\n                //  And fire it\n                this.game._sfx.shot.play();\n                bullet.reset(this.x, this.y + 8);\n                bullet.body.velocity.y = -400;\n                bullet.fromPlayer = this.settings.player;\n                if(this.hasPowerUp) {\n                    this.bulletTime = this.game.time.now + 200;\n                } else {\n                    this.bulletTime = this.game.time.now + 400;\n                }\n                \n            }\n        }\n    }\n}\n\n//# sourceURL=webpack:///./src/js/characters/hero.js?");

/***/ }),

/***/ "./src/js/levels/bossLevel.js":
/*!************************************!*\
  !*** ./src/js/levels/bossLevel.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MainLevel; });\n/* harmony import */ var _characters_hero__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../characters/hero */ \"./src/js/characters/hero.js\");\n/* harmony import */ var _characters_boss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../characters/boss */ \"./src/js/characters/boss.js\");\n\n\nfunction setDummyInputs(context) {\n    var inputOne = {\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.UP).isDown,\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).isDown,\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).isDown,\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.ALT).isDown,\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).isDown,\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.P).isDown,\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.Z).isDown,\n    };\n    var inputTwo = {\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.R).isDown,\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.F).isDown,\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.Q).isDown,\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.S).isDown,\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.W).isDown,\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.K).isDown,\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.I).isDown\n    };\n}\n\nfunction bossColision (boss, bullet) {\n\n    bullet.kill();\n\n    if(bullet.fromPlayer === 'one') {\n        this.player.score += 5;\n        this.player.scoreText.text = `Score: ${this.player.score}`;\n    } else if(bullet.fromPlayer === 'two') {\n        this.playerTwo.score += 5;\n        this.playerTwo.scoreText.text = `Score: ${this.playerTwo.score}`;\n    }\n\n    this.game._sfx.impact.play();\n    let explosion = this.explosions.getFirstExists(false);\n\n    explosion.reset(bullet.body.x, bullet.body.y);\n    explosion.play('kaboom', 30, false, true);\n    boss.health --;\n\n    if(boss.health === boss.halfLifeIntervention){\n        boss.halfLifeInterventionCB(boss);\n    }\n\n    if(boss.health === 0){\n        let explosionOne = this.explosions.getFirstExists(false);\n        explosionOne.scale.setTo(2, 2);\n        explosionOne.reset(boss.body.center.x, boss.body.center.y);\n        explosionOne.play('kaboom', 30, false, true);\n        this.game.camera.shake(0.005, 500);\n        boss.kill();\n        this.endGameTimer = this.game.time.now + 600;\n    }\n}\n\nfunction endGame (context, playersDeath){\n    context.game._sfx.boss.stop();\n\n    console.log('endGame');\n    console.log(context.levelConfig.endGame )\n\n    if(context.levelConfig.endGame || playersDeath){\n        context.levelConfig.endGame = false;\n        let gstateText = context.game.add.text(context.game.world.centerX,context.game.world.centerY,'Game Over ', { font: '84px Arial', fill: '#fff' });\n        gstateText.anchor.setTo(0.5, 0.5);\n\n        if(context.levelConfig.players === 2){\n            if(context.score.isScoreMoreThenLast(context.player.score)){\n                context.game._sfx.mainMenu.play();\n                context.game.state.start('enterName', true, false, context.score, context.player.score, ()=>{\n                    if(context.score.isScoreMoreThenLast(context.playerTwo.score)){\n                        context.game.state.start('enterName', true, false, context.score, context.playerTwo.score, ()=>{\n                            context.game.state.start('showScore', true, false, context.score);\n                        });\n                    } else {\n                        context.game._sfx.mainMenu.play();\n                        context.game.state.start('showScore', true, false, context.score);\n                    }\n                });\n            } else if(context.score.isScoreMoreThenLast(context.playerTwo.score)){\n                context.game._sfx.mainMenu.play();\n                context.game.state.start('enterName', true, false, context.score, context.playerTwo.score, ()=>{\n                    context.game.state.start('showScore', true, false, context.score);\n                });\n            } else {\n                context.game._sfx.mainMenu.play();\n                context.game.state.start('showScore', true, false, context.score); \n            }\n        } else {\n            if(context.score.isScoreMoreThenLast(context.player.score)){\n                console.log('high score');\n                context.game._sfx.mainMenu.play();\n                context.game.state.start('enterName', true, false, context.score, context.player.score, ()=>{\n                    context.game.state.start('showScore', true, false, context.score);\n                });\n            } else {\n                console.log('no high score');\n                context.game._sfx.mainMenu.play();\n                context.game.state.start('showScore', true, false, context.score); \n            }\n        }\n    } else {\n        if(context.levelConfig.players === 2){\n            let player = 0;\n            let playerTwo = 0;\n    \n            context.player.lives.forEachAlive(()=>{\n                player =  player+1\n            })\n            context.playerTwo.lives.forEachAlive(()=>{\n                playerTwo =  playerTwo+1\n            })\n            context.game.state.start('main1', true, false, \n            {\n                players: context.levelConfig.players,\n                playerScore: context.player.score,\n                playerTwoScore: context.playerTwo.score,\n                playerLives: player,\n                playerTwoLives: playerTwo,\n                shootSpeed: 1000, \n                endGame: true\n            }, context.score);\n        } else {\n            console.log('no endGame')\n            let player = 0;\n    \n            context.player.lives.forEachAlive(()=>{\n                player =  player+1\n            })\n            console.log('starting main1');\n            context.game.state.start('main1', true, false, \n                {\n                    players: context.levelConfig.players,\n                    playerScore: context.player.score,\n                    playerLives: player,\n                    shootSpeed: 1000, \n                    endGame: true\n                }, \n                context.score);\n        }\n    }\n}\n\nfunction setupInvader (invader) {\n\n    invader.anchor.x = 0.5;\n    invader.anchor.y = 0.5;\n    invader.animations.add('kaboom');\n\n}\n\nfunction enemyHitsPlayer (player,bullet) {\n    \n    bullet.kill();\n\n    let live = player.lives.getFirstAlive();\n    if (live && !player.hasShield)\n    {\n        player.kill();\n        live.kill();\n    }\n\n    //  And create an explosion :)\n    this.game._sfx.impact.play();\n    var explosion = this.explosions.getFirstExists(false);\n    explosion.reset(player.body.x, player.body.y);\n    explosion.play('kaboom', 30, false, true);\n\n    // When the player dies\n    if (player.lives.countLiving() < 1)\n    {\n        player.kill();\n        player.statusText.text = 'No more lives';\n    }else {\n        if(!player.hasShield){\n            player.reviveAble = true;\n            player.revivePenalty = this.game.time.now + 3000;\n        }\n    }\n\n    if(this.levelConfig.players === 2){\n        if(this.player.lives.countLiving() <1 && this.playerTwo.lives.countLiving() <1){\n            endGame(this, true);\n        }\n    } else {\n        if(this.player.lives.countLiving() <1 ){\n            endGame(this, true);\n        }\n    }\n}\n\nclass MainLevel {\n    constructor() {\n        this.player;\n        this.bullets;\n        this.bulletTime = 0;\n        this.cursors;\n        this.fireButton;\n        this.explosions;\n        this.starfield;\n        this.lives;\n        this.enemyBullet;\n        this.firingTimer = 0;\n        this.stateText;\n        this.livingEnemies = [];\n        this.waveCounter = 0;\n    }\n    preload() {\n        this.game.load.image('bullet', 'assets/img/bullet.png');\n        this.game.load.image('boss1', 'assets/img/boss1.svg');\n        this.game.load.image('enemyBullet', 'assets/img/enemy-bullet.png');\n        this.game.load.image('invader4', 'assets/img/bug4.svg');\n        this.game.load.spritesheet('kaboom', 'assets/img/explode.png', 128, 128);\n        this.game.load.image('starfield', 'assets/img/starfield.png');\n    }\n    init(config, score) {\n        this.game.renderer.renderSession.roundPixels = true;\n        this.levelConfig = config;\n        this.score = score;\n    }\n    create() {\n        this.endGameTimer = undefined;\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n        setDummyInputs(this);\n        //  The scrolling starfield background\n        this.starfield = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield');\n        //this.starfield.tint = (Math.floor(Math.random() * 1000)+700) * 0xffffff;    \n        //  The hero!\n        this.player =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\n            ship: 'ship1',\n            player: 'one',\n            lives: this.levelConfig.playerLives,\n            positionHUD: 'left',\n            spawnPosition: {\n                x: 240,\n                y: 900\n            },\n            keys: this.game.input.keyboard.addKeys({\n                left: Phaser.KeyCode.LEFT,\n                right: Phaser.KeyCode.RIGHT,\n                fire: Phaser.KeyCode.CONTROL\n            })\n        });\n        this.player.score = this.player.score + this.levelConfig.playerScore;\n        this.game.add.existing(this.player);\n        if(this.levelConfig.players === 2) {\n            this.playerTwo =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\n                ship: 'ship2',\n                player: 'two',\n                lives: this.levelConfig.playerTwoLives,\n                positionHUD: 'right',\n                spawnPosition: {\n                    x: 1040,\n                    y: 900\n                },\n                keys: this.game.input.keyboard.addKeys({\n                    left: Phaser.KeyCode.D,\n                    right: Phaser.KeyCode.G,\n                    fire: Phaser.KeyCode.A\n                })\n            });\n            this.playerTwo.score = this.playerTwo.score + this.levelConfig.playerTwoScore;\n            this.game.add.existing(this.playerTwo);\n        }\n        \n        this.boss = new _characters_boss__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.game, function(bosje){\n            bosje.tween.timeScale =1.2;\n        });\n        this.game.add.existing(this.boss);\n    \n        //  An explosion pool\n        this.explosions = this.game.add.group();\n        this.explosions.createMultiple(30, 'kaboom');\n        this.explosions.forEach(setupInvader, this);\n        this.game._sfx.boss.loop = true;\n        this.game._sfx.boss.play();\n\n\n\n                // The enemy's bullets\n        this.enemyBullets = this.game.add.group();\n        this.enemyBullets.enableBody = true;\n        this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;\n        this.enemyBullets.createMultiple(30, 'enemyBullet');\n        this.enemyBullets.setAll('anchor.x', 0.5);\n        this.enemyBullets.setAll('anchor.y', 1);\n        this.enemyBullets.setAll('outOfBoundsKill', true);\n        this.enemyBullets.setAll('checkWorldBounds', true);\n\n    }\n    update () {\n        this.starfield.tilePosition.y += 2;\n\n        this.game.physics.arcade.overlap(this.player.bullets, this.boss, bossColision, null, this);\n        this.game.physics.arcade.overlap(this.boss.bullets, this.player, enemyHitsPlayer, null, this);\n\n        if(this.player.reviveAble && this.player.revivePenalty < this.game.time.now){\n            this.player.revive();\n            this.player.tint = 500 * 0xffffff;\n            this.player.reviveAble = false;\n            this.player.hasShield = true;\n            this.player.shieldTimer = this.game.time.now + 2000;\n        }\n\n        if(this.levelConfig.players === 2) {\n            this.game.physics.arcade.overlap(this.playerTwo.bullets, this.boss, bossColision, null, this);\n            this.game.physics.arcade.overlap(this.boss.bullets, this.playerTwo, enemyHitsPlayer, null, this);\n            if(this.playerTwo.reviveAble && this.playerTwo.revivePenalty < this.game.time.now){\n                this.playerTwo.revive();\n                this.playerTwo.tint = 500 * 0xffffff;\n                this.playerTwo.reviveAble = false;\n                this.playerTwo.hasShield = true;\n                this.playerTwo.shieldTimer = this.game.time.now + 2000;\n            }\n        }\n        if(this.game.time.now >= this.endGameTimer){\n            console.log('Ending game because of endGameTimer')\n            endGame(this);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/js/levels/bossLevel.js?");

/***/ }),

/***/ "./src/js/levels/mainLevel.js":
/*!************************************!*\
  !*** ./src/js/levels/mainLevel.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MainLevel; });\n/* harmony import */ var _characters_hero__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../characters/hero */ \"./src/js/characters/hero.js\");\n\nvar bonusScore;\nfunction setDummyInputs(context) {\n    var inputOne = {\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.UP).isDown,\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).isDown,\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).isDown,\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.ALT).isDown,\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).isDown,\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.P).isDown,\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.Z).isDown,\n    };\n    var inputTwo = {\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.R).isDown,\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.F).isDown,\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.Q).isDown,\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.S).isDown,\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.W).isDown,\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.K).isDown,\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.I).isDown\n    };\n}\n\n\nfunction createAliens (context, invaderType) {\n    context.fireSpeed++;\n    let xMultiply = 68, yMultiply =70;\n    let scale = 0.22;\n    let tweenX = 550;\n    bonusScore = 350;\n\n    setTimeout(e=>bonusScore = bonusScore -100, 30000)\n    setTimeout(e=>bonusScore = bonusScore -100, 20000)\n    setTimeout(e=>bonusScore = bonusScore -100, 10000)\n\n    if(invaderType === 1){\n        xMultiply = 78; \n        //yMultiply =90;\n        scale = 0.12;\n        tweenX = 400\n    }\n\n    if(invaderType === 2){\n        xMultiply = 78; \n        //yMultiply =90;\n        scale = 0.12;\n        tweenX = 500\n    }\n\n    if(invaderType === 3){\n        xMultiply = 85; \n        //yMultiply =90;\n        scale = 0.22;\n        tweenX = 500\n    }\n\n    for (var y = 0; y < 4; y++)\n    {\n        for (var x = 0; x < 8; x++)\n        {\n            var alien = context.aliens.create(x * xMultiply, y * yMultiply, 'invader'+invaderType);\n            alien.scale.setTo(scale, scale);\n            alien.anchor.setTo(0.5, 0.5);\n            //alien.animations.add('fly', [ 0, 1, 2, 3 ], 20, true);\n            //alien.play('fly');\n            // if(tint){\n            //     alien.tint = tint\n            // }\n            \n            alien.body.moves = false;\n        }\n    }\n\n    context.aliens.x = 100;\n    context.aliens.y = 50;\n\n    if(context._tween){\n        context._tween.stop();\n        context._tween = undefined;\n    }\n    //  All this does is basically start the invaders moving. Notice we're moving the Group they belong to, rather than the invaders directly.\n    context._tween = context.game.add.tween(context.aliens).to( { x: tweenX }, 1000 /(context.fireSpeed/4), Phaser.Easing.Linear.None, true, 0, 1000, true);\n    context._tween.onRepeat.add(()=>{context.aliens.y += 30;}, this);\n}\n\nfunction enemyFires (context) {\n\n    //  Grab the first bullet we can from the pool\n    let enemyBullet = context.enemyBullets.getFirstExists(false);\n\n    context.livingEnemies.length=0;\n\n    context.aliens.forEachAlive(function(alien){\n\n        // put every living enemy in an array\n        context.livingEnemies.push(alien);\n    });\n\n\n    if (enemyBullet && context.livingEnemies.length > 0) {\n        \n        var random= context.game.rnd.integerInRange(0,context.livingEnemies.length-1);\n\n        // randomly select one of them\n        var shooter=context.livingEnemies[random];\n        // And fire the bullet from this enemy\n        enemyBullet.reset(shooter.body.x, shooter.body.y);\n\n        let randomPlayer = Math.floor(Math.random() * 2)+1;\n\n        if(context.levelConfig.players === 1){\n            randomPlayer = 1;\n        }\n\n        if(randomPlayer === 1){\n            context.game.physics.arcade.moveToObject(enemyBullet,context.player,120);\n        } else {\n            context.game.physics.arcade.moveToObject(enemyBullet,context.playerTwo,120);\n        }\n        console.log(context.levelConfig.shootSpeed || (2000/ (context.fireSpeed/2)));\n        let shootspeed = context.levelConfig.shootSpeed || (2000/ (context.fireSpeed/2));\n        context.firingTimer = context.game.time.now + shootspeed;\n    }\n\n}\n\nfunction setupInvader (invader) {\n\n    invader.anchor.x = 0.5;\n    invader.anchor.y = 0.5;\n    invader.animations.add('kaboom');\n\n}\n\nfunction createBlindWalls(context){\n\n    for (var i = 0; i < 75; i++) { \n        let sprite = context.enemyWalls.create(20*i, 865, 'invisible-wall');    \n        // physic properties\n        context.game.physics.enable(sprite);\n        sprite.body.immovable = true;\n        sprite.body.allowGravity = false;\n    }\n}\n\nfunction enemyHitsWall (){\n    console.log('end game');\n    let gstateText = this.game.add.text(this.game.world.centerX,this.game.world.centerY,'Game Over ', { font: '84px Arial', fill: '#fff' });\n    gstateText.anchor.setTo(0.5, 0.5);\n\n    let gScoreText = this.game.add.text(this.game.world.centerX,this.game.world.centerY + 100,'Your Score: '+ this.player.score, { font: '84px Arial', fill: '#fff' });\n    gScoreText.anchor.setTo(0.5, 0.5);\n\n    var data = {\n        \"eventName\": \"playerGameOver\",\n        \"player\": {\n            \"nickName\": this.game._nickname\n        }\n    };\n    this.game._connection.send(JSON.stringify(data));\n\n    this.gameEnded = true;\n    this.game.paused = true;\n    this.aliens.callAll('kill', this);\n    this.player.kill();\n    this.enemyBullets.callAll('kill', this);\n\n \n\n}\n\nfunction collisionHandler (bullet, alien) {\n    //console.log(this.game._connection);\n\n    //  When a bullet hits an alien we kill them both\n    bullet.kill();\n    alien.kill();\n    //  Increase the score\n    if(bullet.fromPlayer === 'one') {\n        this.player.score += 20;\n        this.player.scoreText.text = `Score: ${this.player.score}`;\n        var data = {\n            \"eventName\": \"updatePlayerScore\",\n            \"player\": {\n                \"nickName\": this.game._nickname,\n                \"score\": this.player.score\n            }\n        };\n        this.game._playerScore = this.player.score;\n        this.game._connection.send(JSON.stringify(data));\n    } else if(bullet.fromPlayer === 'two') {\n        this.playerTwo.score += 20;\n        this.playerTwo.scoreText.text = `Score: ${this.playerTwo.score}`;\n    }\n        \n\n    //  And create an explosion :)\n    this.game._sfx.impact.play();\n    var explosion = this.explosions.getFirstExists(false);\n    explosion.reset(alien.body.x, alien.body.y);\n    explosion.play('kaboom', 30, false, true);\n\n    if (this.aliens.countLiving() == 0) {\n        this.player.score +=bonusScore;\n        console.log('bonusScore', bonusScore);\n        this.player.bullets.callAll('kill');\n        if(this.levelConfig.players === 2){\n            this.playerTwo.bullets.callAll('kill');\n        }\n        this.enemyBullets.callAll('kill');\n        //score += 1000;\n        //scoreText.text = scoreString + score;\n\n        //enemyBullets.callAll('kill',this);\n        //stateText.text = \" You Won, \\n Click to restart\";\n        //stateText.visible = true;\n\n        //the \"click to restart\" handler\n        //game.input.onTap.addOnce(restart,this);\n        if(this.waveCounter ===2){\n            this.waveCounter = 0;\n            createAliens(this, 3);\n            // if(this.levelConfig.players === 2){\n            //     console.log('waves finished');\n            //     let player = 0;\n            //     let playerTwo = 0;\n\n            //     this.player.lives.forEachAlive(()=>{\n            //         player =  player+1\n            //     })\n            //     this.playerTwo.lives.forEachAlive(()=>{\n            //         playerTwo =  playerTwo+1\n            //     })\n            //     this.gameEnded = true;\n            //     this.game._sfx.bodenLoop.stop();\n            //     this.game._sfx.boden.stop();\n            //     console.log('starting bossLevel');\n            //     this.game.state.start('bossLevel', true, false, {\n            //         players: this.levelConfig.players,\n            //         playerScore: this.player.score,\n            //         playerTwoScore: this.player.score,\n            //         playerLives: player,\n            //         playerTwoLives: playerTwo,\n            //         endGame: this.levelConfig.endGame \n            //     }, this.score);\n            // } else {\n            //     console.log('wave levelConfig.endGame');\n            //     console.log(this.levelConfig.endGame);\n\n            //     let player = 0;\n            //     this.player.lives.forEachAlive(()=>{\n            //         player =  player+1\n            //     })\n            //     this.gameEnded = true;\n            //     this.game._sfx.bodenLoop.stop();\n            //     this.game._sfx.boden.stop();\n            //     console.log('starting bossLevel');\n            //     this.game.state.start('bossLevel', true, false, {\n            //         players: this.levelConfig.players,\n            //         playerScore: this.player.score,\n            //         playerLives: player,\n            //         endGame: this.levelConfig.endGame \n            //     }, this.score); \n            // }\n        } else {\n            console.log('starting next wave')\n            this.waveCounter++;\n            createAliens(this, this.waveCounter);\n        }\n    }\n}\n\nfunction poweruphitsplayer (player, pwrup){\n    pwrup.kill();\n    this.resetPowerUp();\n    player.hasPowerUp = true;\n    player.powerUpTime = this.game.time.now + 10000\n}\n\nfunction enemyHitsPlayer (player,bullet) {\n\n    bullet.kill();\n    let live = player.lives.getFirstAlive();\n    if (live && !player.hasShield)\n    {\n        player.kill();\n        live.kill();\n    }\n\n    //  And create an explosion :)\n    this.game._sfx.impact.play();\n    var explosion = this.explosions.getFirstExists(false);\n    explosion.reset(player.body.x, player.body.y);\n    explosion.play('kaboom', 30, false, true);\n\n    // When the player dies\n    if (player.lives.countLiving() < 1)\n    {\n        player.kill();\n        player.statusText.text = 'No more lives';\n    }else {\n        if(!player.hasShield){\n            player.reviveAble = true;\n            player.revivePenalty = this.game.time.now + 3000;\n        }\n    }\n\n    if(this.levelConfig.players === 2){\n        if(this.player.lives.countLiving() <1 && this.playerTwo.lives.countLiving() <1){\n            let gstateText = this.game.add.text(this.game.world.centerX,this.game.world.centerY,'Game OVer ', { font: '84px Arial', fill: '#fff' });\n            gstateText.anchor.setTo(0.5, 0.5);\n            let gScoreText = this.game.add.text(this.game.world.centerX,this.game.world.centerY + 100,'Your Score: '+ this.player.score, { font: '84px Arial', fill: '#fff' });\n            gScoreText.anchor.setTo(0.5, 0.5);\n            \n            \n            this.gameEnded = true;\n            this.game._sfx.bodenLoop.stop();\n            this.game._sfx.boden.stop();\n            if(this.score.isScoreMoreThenLast(this.player.score)){\n                this.game._sfx.mainMenu.play();\n                this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\n                    if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\n                        this.game._sfx.mainMenu.play();\n                        this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\n                            this.game.state.start('showScore', true, false, this.score);\n                        });\n                    } else {\n                        this.game._sfx.mainMenu.play();\n                        this.game.state.start('showScore', true, false, this.score);\n                    }\n                });\n            } else if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\n                this.game._sfx.mainMenu.play();\n                this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\n                    this.game.state.start('showScore', true, false, this.score);\n                });\n            }\n            else {\n                this.game._sfx.mainMenu.play();\n                this.game.state.start('showScore', true, false, this.score); \n            }\n\n\n        }\n    } else {\n        if(this.player.lives.countLiving() <1 ){\n            let gstateText = this.game.add.text(this.game.world.centerX,this.game.world.centerY,'Game Over ', { font: '84px Arial', fill: '#fff' });\n            gstateText.anchor.setTo(0.5, 0.5);\n\n            let gScoreText = this.game.add.text(this.game.world.centerX,this.game.world.centerY + 100,'Your Score: '+ this.player.score, { font: '84px Arial', fill: '#fff' });\n            gScoreText.anchor.setTo(0.5, 0.5);\n\n            var data = {\n                \"eventName\": \"playerGameOver\",\n                \"player\": {\n                    \"nickName\": this.game._nickname,\n                    \"score\": this.player.score\n                }\n            };\n            this.game._connection.send(JSON.stringify(data));\n\n            this.gameEnded = true;\n            this.game.paused = true;\n            this.game._sfx.bodenLoop.stop();\n            this.game._sfx.boden.stop();\n            \n            if(this.score.isScoreMoreThenLast(this.player.score)){\n                this.game._sfx.mainMenu.play();\n                this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\n                    this.game.state.start('showScore', true, false, this.score);\n                });\n            } else {\n                this.game._sfx.mainMenu.play();\n                this.game.state.start('showScore', true, false, this.score); \n            }\n        }\n    }\n}\n\n\n\nclass MainLevel {\n    constructor() {\n        this.player;\n        this.aliens;\n        this.bullets;\n        this.bulletTime = 0;\n        this.cursors;\n        this.fireButton;\n        this.explosions;\n        this.starfield;\n        this.lives;\n        this.enemyBullet;\n        this.firingTimer = 0;\n        this.stateText;\n        this.livingEnemies = [];\n        this.waveCounter = 0;\n    }\n    preload() {\n        this.game.load.image('bullet', 'assets/img/bullet.png');\n        this.game.load.image('enemyBullet', 'assets/img/enemy-bullet.png');\n        this.game.load.image('invader1', 'assets/img/bug1.svg');\n        this.game.load.image('invader2', 'assets/img/bug2.svg');\n        this.game.load.image('invader3', 'assets/img/bug3.svg');\n        this.game.load.image('invader4', 'assets/img/bug4.svg');\n        this.game.load.spritesheet('kaboom', 'assets/img/explode.png', 128, 128);\n        //this.game.load.image('starfield', 'assets/img/starfield2.png');\n        this.game.load.image('starfield', 'assets/img/starfield.png');\n        this.game.load.image('starfield2', 'assets/img/starfield3.png');\n        this.game.load.image('invisible-wall', 'assets/img/invisible_wall.png');\n    }\n    init(config, score) {\n        this.game.renderer.renderSession.roundPixels = true;\n        this.levelConfig = config;\n        this.score = score;\n    }\n\n    reset() {\n        this.waveCounter = 0;\n    }\n\n    create() {\n        console.log(this.game)\n        this.reset()\n        this.game.stage.backgroundColor = \"#000000\";\n        this.fireSpeed = 0;\n        this.game.powerUpTime = this.game.time.now + this.game.rnd.integerInRange(6000,30000);\n        this.game.powerUpOnScreen = false;\n        \n    \n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    \n        //  The scrolling starfield background\n        //this.starfield = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield');\n        //this.starfield2 = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield2');\n        this.starfield = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield');\n        setDummyInputs(this);\n        //  The hero!\n        this.player =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\n            ship: 'ship1',\n            player: 'one',\n            lives: this.levelConfig.playerLives || 3,\n            positionHUD: 'left',\n            spawnPosition: {\n                x: 240,\n                y: 900\n            },\n            keys: this.game.input.keyboard.addKeys({\n                left: Phaser.KeyCode.LEFT,\n                right: Phaser.KeyCode.RIGHT,\n                fire: Phaser.KeyCode.SPACEBAR\n            })\n        });\n        let addedScore = this.levelConfig.playerScore ||0;\n        this.player.score = this.player.score + addedScore;\n        this.game.add.existing(this.player);\n\n        //  The baddies!\n        this.aliens = this.game.add.group();\n        this.aliens.enableBody = true;\n        this.aliens.physicsBodyType = Phaser.Physics.ARCADE;\n    \n        createAliens(this, 4);\n        //  An explosion pool\n        this.explosions = this.game.add.group();\n        this.explosions.createMultiple(30, 'kaboom');\n        this.explosions.forEach(setupInvader, this);\n        this.game._sfx.bodenLoop.loop = true;\n\n        this.game._sfx.boden.onStop.addOnce( ()=>{\n            if(!this.gameEnded){\n                this.game._sfx.bodenLoop.play();\n            }\n            \n        });\n        if(!this.game._multiplayerMode){\n            this.game._sfx.boden.play();\n        }\n        \n\n        // The enemy's bullets\n        this.enemyBullets = this.game.add.group();\n        this.enemyBullets.enableBody = true;\n        this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;\n        this.enemyBullets.createMultiple(30, 'enemyBullet');\n        this.enemyBullets.setAll('anchor.x', 0.5);\n        this.enemyBullets.setAll('anchor.y', 0.5);\n        this.enemyBullets.setAll('outOfBoundsKill', true);\n        this.enemyBullets.setAll('checkWorldBounds', true);\n\n        this.enemyWalls = this.game.add.group();\n        this.enemyWalls.visible = false;\n        createBlindWalls(this);\n\n        this.powerUps = this.game.add.group();\n\n\n        this.resetPowerUp = function() {\n            console.log('reset is called');\n            this.game.powerUpTime = this.game.time.now + this.game.rnd.integerInRange(6000,30000);\n            this.game.powerUpOnScreen = false;\n        };\n    }\n\n    update () {\n        //this.starfield.tilePosition.y += 1;\n        //this.starfield2.tilePosition.y += 2;\n        if(this.game.time.now > this.game.powerUpTime && !this.game.powerUpOnScreen){\n            console.log('powerup on screen')\n            this.game.powerUpOnScreen = true;\n            let spawnPositionpwer = this.game.rnd.integerInRange(20,this.game.width -20);\n            let sprite = this.powerUps.create(spawnPositionpwer, 0, 'powerup');\n            sprite.scale.setTo(0.07, 0.07);   \n            \n            // physic properties\n            this.game.physics.enable(sprite);\n            sprite.body.allowGravity = false;\n\n            sprite.checkWorldBounds = true;\n            sprite.events.onOutOfBounds.add(function(pwr){\n                pwr.kill();\n                this.resetPowerUp();\n            }, this);\n\n\n            // sprite.body.collideWorldBounds = true;\n\n            // //  By default the Signal is empty, so we create it here:\n            // sprite.body.onWorldBounds = new Phaser.Signal();\n            // sprite.body.onWorldBounds.add(function(e,k ,j){\n            //     console.log(e, k, j);\n            // }, this);\n            this.game.physics.arcade.moveToXY(sprite,spawnPositionpwer ,900, 100);\n            \n        }\n\n        if (this.game.time.now > this.firingTimer)\n        {\n            enemyFires(this);\n        }\n        this.game.physics.arcade.overlap(this.aliens, this.enemyWalls, enemyHitsWall, null, this);\n        this.game.physics.arcade.overlap(this.player.bullets, this.aliens, collisionHandler, null, this);\n        this.game.physics.arcade.overlap(this.enemyBullets, this.player, enemyHitsPlayer, null, this);\n        this.game.physics.arcade.overlap(this.powerUps, this.player, poweruphitsplayer, null, this);\n\n\n        if(this.player.reviveAble && this.player.revivePenalty < this.game.time.now){\n            this.player.revive();\n            this.player.tint = 500 * 0xffffff;\n            this.player.reviveAble = false;\n            this.player.hasShield = true;\n            this.player.shieldTimer = this.game.time.now + 2000;\n        }\n\n    }\n}\n\n\n//# sourceURL=webpack:///./src/js/levels/mainLevel.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _levels_mainLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./levels/mainLevel */ \"./src/js/levels/mainLevel.js\");\n/* harmony import */ var _levels_bossLevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./levels/bossLevel */ \"./src/js/levels/bossLevel.js\");\n/* harmony import */ var capmanhighscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! capmanhighscore */ \"./node_modules/capmanhighscore/dist/index.js\");\n/* harmony import */ var capmanhighscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(capmanhighscore__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst pageURL = `http://${window.location.hostname}:${window.location.port}/game`;\nconst wsURL = `ws://${window.location.hostname}:8081/`;\nconst url = new URL(window.location.href);\nlet multiplayerMode = url.searchParams.get('multiplayerMode') || true ;\nmultiplayerMode = JSON.parse(multiplayerMode) //making it an actual boolean\n\nlet elems = {};\nlet gameStatus = {status: 'form'};\nlet nickname;\n\n// Init sockets\nlet connection;\nconst initSockets = () => {\n  if (connection && connection.readyState === 1) {\n    connection.close();\n  }\n  connection = new WebSocket(wsURL);\n  connection.onopen = () => console.log('WebSocket open');\n  connection.onclose = () => console.log('WebSocket close');\n  connection.onerror = error => console.log(`WebSocket error: ${error}`);\n  connection.onmessage = message => {\n    console.log('WebSocket message:', message);\n    try {\n      let data = JSON.parse(message.data);\n      if (data.eventName === 'startGame' && multiplayerMode) {\n        startCountDown();\n      } else if (data.eventName === 'resetGame' && multiplayerMode) {\n        resetGame();\n      } else if (data.eventName === 'updatePlayerScore') {\n        //This one wil be one that you send not needed to read\n      } else if (data.eventName === 'addNewPlayer') {\n        updateName(data);\n      } else if (data.eventName === 'playerGameOver') {\n        gameOver(data.player);\n      }\n    } catch (err) {\n      console.log(err)\n    }\n  };\n};\ninitSockets();\n\n// Init key controls\nlet keys = {};\n\nfunction keyHandle(event) {\n  keys[event.key] = event.type === 'keydown';\n  if (keys['1'] && keys['2']) {\n    resetGame();\n  }\n  if (event.type === 'keydown' && event.code === 'F9') {\n    document.getElementById('adminMenu').classList.toggle('d-none');\n  }\n}\n\ndocument.addEventListener('keydown', keyHandle);\ndocument.addEventListener('keyup', keyHandle);\n\n// Init game\nlet score = new capmanhighscore__WEBPACK_IMPORTED_MODULE_2__[\"ScoreController\"]({name: 'aTestGame'});\nlet game = new Phaser.Game(1152, 648, Phaser.AUTO, 'capManGalaxy');\n\nlet preloader = {\n  preload: function () {\n    game.load.image('ship1', 'assets/img/Jet-top.svg');\n    game.load.image('ship2', 'assets/img/Jet2-top.svg');\n    game.load.image('powerup', 'assets/img/powerup.png');\n    game.load.audio('sfx:shot', 'assets/audio/shot.wav');\n    game.load.audio('sfx:impact', 'assets/audio/impact.wav');\n    game.load.audio('sfx:boden', 'assets/audio/Superhero_pack/Superhero_violin.ogg');\n    game.load.audio('sfx:bodenLoop', 'assets/audio/Superhero_pack/Superhero_violin_no_intro.ogg');\n    game.load.audio('sfx:spacetheme', 'assets/audio/spacetheme.ogg');\n    game.load.audio('sfx:bossTheme', 'assets/audio/Continuum.mp3');\n  },\n  create: function () {\n    game._sfx = {\n      shot: this.game.add.audio('sfx:shot'),\n      impact: this.game.add.audio('sfx:impact'),\n      boden: this.game.add.audio('sfx:boden'),\n      bodenLoop: this.game.add.audio('sfx:bodenLoop'),\n      boss: this.game.add.audio('sfx:bossTheme'),\n      mainMenu: this.game.add.audio('sfx:spacetheme')\n    };\n    this.game._sfx.mainMenu.play();\n  }\n};\ngame.state.add('preloader', preloader)\ngame.state.start('preloader', true, false);\n\nconst startCountDown = () => {\n  let secs = 3;\n  let interval = setInterval(() => {\n    elems.countdown.innerText = secs;\n    if (secs <= 0) {\n      clearInterval(interval);\n      startGame();\n    }\n    secs -= 1;\n  }, 1000);\n};\n\nconst startGame = () => {\n  game._connection = connection;\n  game._nickname = nickname;\n  game._multiplayerMode = multiplayerMode;\n  if (gameStatus.status !== 'waiting') {\n    console.log('User not ready!');\n    return;\n  }\n  elems.capManGalaxy.classList.remove(\"d-none\");\n  elems.formplaceholder.classList.add(\"d-none\");\n  elems.userwaiting.classList.add(\"d-none\");\n  let main1 = new _levels_mainLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  let bossLevel = new _levels_bossLevel__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n  game.state.add('bossLevel', bossLevel);\n  game.state.add('main1', main1);\n  let players = 1;\n  game._sfx.mainMenu.stop();\n  game.state.start('main1', true, false, {players: players}, score);\n};\n\nconst gameOver = (player) => {\n  console.log('gameOver');\n  if (player) {\n    elems.score.innerText = game._playerScore ? game._playerScore : 0;\n    elems.name.innerText = player.nickName;\n  }\n  elems.capManGalaxy.classList.add(\"d-none\");\n  elems.formplaceholder.classList.remove(\"d-none\");\n  elems.gameover.classList.remove(\"d-none\");\n  if(!multiplayerMode){\n    setTimeout(e=> resetGame(), 15000)\n  }\n};\n\nconst resetGame = () => {\n  console.log('resetGame');\n  window.location = pageURL;\n};\n\nconst updateName = (data) => {\n  nickname = data.nickname;\n  game._nickname = nickname;\n  data.b && elems.overlayb.classList.toggle(\"d-none\");\n};\n\nwindow.addEventListener('load', function () {\n  elems.userform = document.getElementById('userform');\n  elems.userwaiting = document.getElementById('userwaiting');\n  elems.countdown = document.getElementById('countdown');\n  elems.gameover = document.getElementById('gameover');\n  elems.name = document.getElementById('name');\n  elems.score = document.getElementById('score');\n  elems.capManGalaxy = document.getElementById('capManGalaxy');\n  elems.overlayb = document.getElementById('overlayb');\n  elems.formplaceholder = document.getElementById('formplaceholder');\n\n  document.getElementById('resetconnection').addEventListener('click', initSockets);\n  document.getElementById('startgame').addEventListener('click', startGame);\n\n  // Fetch all the forms we want to apply custom Bootstrap validation styles to\n  const forms = document.getElementsByClassName('needs-validation');\n  // Loop over them and prevent submission\n  const validation = Array.prototype.filter.call(forms, function (form) {\n    form.addEventListener('submit', function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n      if (form.checkValidity() === true) {\n        nickname = userform.nickname.value;\n        let player = {\n          nickName: nickname,\n          fullName: userform.fullname.value,\n          email: userform.email.value\n        };\n        connection.send(JSON.stringify({eventName: \"addNewPlayer\", player}));\n        gameStatus.status = 'waiting';\n        elems.userform.classList.add(\"d-none\");\n        if(multiplayerMode){\n          elems.userwaiting.classList.remove(\"d-none\");\n        } else {\n          startGame();\n        }\n\n      }\n      form.classList.add('was-validated');\n    }, false);\n  });\n}, false);\n\n\n//# sourceURL=webpack:///./src/js/main.js?");

/***/ })

/******/ });