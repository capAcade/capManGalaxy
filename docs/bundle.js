/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/capmanhighscore/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/capmanhighscore/dist/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/js/main.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/js/enterName.js\":\n/*!*****************************!*\\\n  !*** ./src/js/enterName.js ***!\n  \\*****************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return EnterName; });\\nlet blinkTimer = 0;\\r\\nlet blinkVelocity = 20;\\r\\nlet timer = 0;\\r\\nconst menuVelocity = 20;\\r\\n\\r\\nconst handleInput = (context) => {\\r\\n    \\r\\n    timer--;\\r\\n    if (context.keys.down.isDown && timer<=0) {\\r\\n        context.activeCharacter = context.activeCharacter +1\\r\\n        if(context.activeCharacter > 90){\\r\\n            context.activeCharacter = 90;\\r\\n        }\\r\\n        timer=menuVelocity;\\r\\n    } else if (context.keys.up.isDown && timer<=0) {\\r\\n        context.activeCharacter = context.activeCharacter -1\\r\\n        if(context.activeCharacter < 65){\\r\\n            context.activeCharacter = 65;\\r\\n        }\\r\\n        timer = menuVelocity;\\r\\n    }\\r\\n    else if (context.keys.right.isDown && timer<=0) {\\r\\n        if(context.letters.length -1 <= context.activeLetter){\\r\\n            context.letters.push(context.game.add.text(context.game.world.centerX -157+((context.activeLetter+1)*28), context.game.world.centerY, 'A', { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" }))\\r\\n            context.letters[context.activeLetter +1].anchor.set(0.5);\\r\\n            context.letters[context.activeLetter +1].stroke = '#26D8D7';\\r\\n            context.letters[context.activeLetter +1].strokeThickness = 6;\\r\\n        }\\r\\n        context.activeLetter = context.activeLetter +1\\r\\n        timer=menuVelocity;\\r\\n    } \\r\\n    else if (context.keys.left.isDown && timer<=0) {\\r\\n        context.activeLetter = context.activeLetter -1\\r\\n        if(context.activeLetter < 0) {\\r\\n            context.activeLetter = 0\\r\\n        }\\r\\n\\r\\n        timer=menuVelocity;\\r\\n        \\r\\n    } \\r\\n    else if (context.keys.fire.isDown && timer<=0) {\\r\\n        //context.cb(context.config.buttons[context.selectedButton]);\\r\\n        let name='';\\r\\n        context.letters.forEach((letter, index)=>{\\r\\n            name = name+ letter._text;\\r\\n        });\\r\\n        context.score.saveNewScore(name, context.playerScore)\\r\\n        if(typeof context.cb === 'function'){\\r\\n            context.cb();\\r\\n        }\\r\\n        if(typeof context.initCB === 'function'){\\r\\n            context.initCB();\\r\\n        }\\r\\n        timer=menuVelocity;\\r\\n        \\r\\n    }  \\r\\n    else {\\r\\n        //timer--;\\r\\n        //console.log('keypressisstoped')\\r\\n    }\\r\\n };\\r\\n\\r\\nclass EnterName {\\r\\n    constructor(config, cb) {\\r\\n        this.config = config;\\r\\n        this.cb = cb;\\r\\n        this.selectedButton = 0;\\r\\n    }\\r\\n    preload() {\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            this.game.load.image('bg', this.config.background);\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            this.game.load.image('logo', this.config.logo);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    init(score, playerScore, initCB) {\\r\\n        this.game.renderer.renderSession.roundPixels = true;\\r\\n        this.keys = this.game.input.keyboard.addKeys({\\r\\n            left: Phaser.KeyCode.LEFT,\\r\\n            right: Phaser.KeyCode.RIGHT,\\r\\n            up: Phaser.KeyCode.UP,\\r\\n            down: Phaser.KeyCode.DOWN,\\r\\n            fire: Phaser.KeyCode.CONTROL\\r\\n        });\\r\\n        this.score = score;\\r\\n        this.playerScore = playerScore;\\r\\n        this.initCB = initCB;\\r\\n    }\\r\\n    create() {\\r\\n        this.game.stage.backgroundColor = '#000033';\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            let bg = this.game.add.image(0, 0, 'bg');\\r\\n            bg.height = this.game.height;\\r\\n            bg.width = this.game.width;\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            let logo = this.game.add.image(this.game.world.centerX, this.game.world.centerY -400, 'logo');\\r\\n            logo.anchor.set(0.5);\\r\\n        }\\r\\n\\r\\n        let style = { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" };\\r\\n        let offSet = 0;\\r\\n\\r\\n        this.eyn = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 100, 'Enter you name', style);\\r\\n        this.eyn.anchor.set(0.5);\\r\\n        this.eyn.stroke = '#26D8D7';\\r\\n        this.eyn.strokeThickness = 6;\\r\\n\\r\\n        this.eyn = this.game.add.text(this.game.world.centerX, this.game.world.centerY - 300, `Your score = ${this.playerScore}`, style);\\r\\n        this.eyn.anchor.set(0.5);\\r\\n        this.eyn.stroke = '#26D8D7';\\r\\n        this.eyn.strokeThickness = 6;\\r\\n\\r\\n        this.activeLetter = 0;\\r\\n        this.activeCharacter = 65\\r\\n        this.letters = [this.game.add.text(this.game.world.centerX -157, this.game.world.centerY, 'A', style)];\\r\\n        this.letters[0].anchor.set(0.5);\\r\\n        this.letters[0].stroke = '#26D8D7';\\r\\n        this.letters[0].strokeThickness = 6;\\r\\n\\r\\n    }\\r\\n    update () {\\r\\n        handleInput(this);\\r\\n        this.letters[this.activeLetter].text = String.fromCharCode(this.activeCharacter);\\r\\n        blinkTimer++\\r\\n        if(blinkTimer >= blinkVelocity){\\r\\n            this.letters[this.activeLetter].visible = !this.letters[this.activeLetter].visible;\\r\\n            blinkTimer = 0;\\r\\n        }\\r\\n        this.letters.forEach((letter, index)=>{\\r\\n            if(index !== this.activeLetter){\\r\\n                letter.visible = true;\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/enterName.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/main.js\":\n/*!************************!*\\\n  !*** ./src/js/main.js ***!\n  \\************************/\n/*! exports provided: ScoreController, ShowScore, EnterName */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _scoreController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scoreController */ \\\"./src/js/scoreController.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"ScoreController\\\", function() { return _scoreController__WEBPACK_IMPORTED_MODULE_0__[\\\"default\\\"]; });\\n\\n/* harmony import */ var _showScore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./showScore */ \\\"./src/js/showScore.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"ShowScore\\\", function() { return _showScore__WEBPACK_IMPORTED_MODULE_1__[\\\"default\\\"]; });\\n\\n/* harmony import */ var _enterName__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enterName */ \\\"./src/js/enterName.js\\\");\\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \\\"EnterName\\\", function() { return _enterName__WEBPACK_IMPORTED_MODULE_2__[\\\"default\\\"]; });\\n\\n// this is the bundle where all the utility classes are combined so that you are able to get\\r\\n// all the classes just with one file from the node module\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/main.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/scoreController.js\":\n/*!***********************************!*\\\n  !*** ./src/js/scoreController.js ***!\n  \\***********************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return scoreConroller; });\\nconst mockScore = [\\r\\n    {\\r\\n        name: 'Capgemini',\\r\\n        score: 999\\r\\n    },\\r\\n        {\\r\\n        name: 'sogeti',\\r\\n        score: 888\\r\\n    },\\r\\n    {\\r\\n        name: 'backelite',\\r\\n        score: 777\\r\\n    },\\r\\n    {\\r\\n        name: 'blue harvest',\\r\\n        score: 666\\r\\n    },\\r\\n    {\\r\\n        name: 'farenheit',\\r\\n        score: 555\\r\\n    },\\r\\n    {\\r\\n        name: 'idin',\\r\\n        score: 444\\r\\n    },\\r\\n    {\\r\\n        name: 'gettronics',\\r\\n        score: 333\\r\\n    },\\r\\n    {\\r\\n        name: 'KPN',\\r\\n        score: 222\\r\\n    },\\r\\n    {\\r\\n        name: 'infosys',\\r\\n        score: 112\\r\\n    },\\r\\n    {\\r\\n        name: 'TCS',\\r\\n        score: 111\\r\\n    }\\r\\n];\\r\\n//#TODO change capmanGameScore an object makes live easier... capmanGameScore.[gameName]\\r\\nconst getCapManGameScoreCoockie = () =>{\\r\\n    var out;\\r\\n    try {\\r\\n        out = JSON.parse(document.cookie).capManGameScore;\\r\\n    } catch {\\r\\n        out = [];\\r\\n    }\\r\\n    return out || [];\\r\\n}\\r\\n\\r\\nconst getGameScoreFromCookie = (name) =>{\\r\\n    return getCapManGameScoreCoockie().filter((game)=>{\\r\\n        return game.name === name;\\r\\n    })[0];\\r\\n}\\r\\n\\r\\nconst getIndexOfGame = (name) => {\\r\\n    return getCapManGameScoreCoockie().findIndex((element)=>{\\r\\n        return element.name === name;\\r\\n    });\\r\\n}\\r\\n\\r\\nconst setGameScoreToCookie = (ranking, gameName) =>{\\r\\n    let out = getCapManGameScoreCoockie();\\r\\n    let gameIndex = getIndexOfGame(gameName);\\r\\n    if(gameIndex !== -1){\\r\\n        out[gameIndex].ranking = ranking;\\r\\n    } else {\\r\\n        out.push({\\r\\n            name: gameName,\\r\\n            ranking: ranking\\r\\n        })\\r\\n    }\\r\\n    document.cookie = JSON.stringify({capManGameScore: out});\\r\\n}\\r\\n\\r\\nconst getRankPositionIndex = (score, rankList) =>{\\r\\n    return rankList.findIndex((element)=>{\\r\\n        return element.score < score;\\r\\n    });\\r\\n}\\r\\n\\r\\nclass scoreConroller{\\r\\n    constructor(game) {\\r\\n        this.name = game.name;\\r\\n\\r\\n        //Check if there is already some scoring if not we create mock score\\r\\n        if(getGameScoreFromCookie(this.name)){\\r\\n            this.ranking = getGameScoreFromCookie(this.name).ranking || mockScore;\\r\\n        } else {\\r\\n            this.ranking = mockScore;\\r\\n        }\\r\\n    }\\r\\n    saveNewScore(playerName, score){\\r\\n        if(this.isScoreMoreThenLast) {\\r\\n            this.ranking.splice(getRankPositionIndex(score, this.ranking), 0, {\\r\\n                name: playerName, \\r\\n                score: score})\\r\\n            this.ranking.splice(10, 1);\\r\\n            setGameScoreToCookie(this.ranking, this.name);\\r\\n        }\\r\\n    }\\r\\n    isScoreMoreThenLast(score){\\r\\n        return this.ranking[this.ranking.length -1].score < score;\\r\\n    }\\r\\n}\\n\\n//# sourceURL=webpack://someLibName/./src/js/scoreController.js?\");\n\n/***/ }),\n\n/***/ \"./src/js/showScore.js\":\n/*!*****************************!*\\\n  !*** ./src/js/showScore.js ***!\n  \\*****************************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\"default\\\", function() { return ShowScore; });\\nlet blinkTimer = 0;\\r\\nlet blinkVelocity = 30;\\r\\n\\r\\nconst handleInput = (context) => {\\r\\n    \\r\\n    if (context.keys.fire.isDown) {\\r\\n        context.cb();\\r\\n    }  \\r\\n\\r\\n };\\r\\n\\r\\nclass ShowScore {\\r\\n    constructor(config, cb) {\\r\\n        this.config = config;\\r\\n        this.cb = cb;\\r\\n        this.selectedButton = 0;\\r\\n    }\\r\\n    preload() {\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            this.game.load.image('bg', this.config.background);\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            this.game.load.image('logo', this.config.logo);\\r\\n        }\\r\\n\\r\\n    }\\r\\n    init(score) {\\r\\n        this.game.renderer.renderSession.roundPixels = true;\\r\\n        this.keys = this.game.input.keyboard.addKeys({\\r\\n            fire: Phaser.KeyCode.CONTROL\\r\\n        });\\r\\n        this.score = score;\\r\\n    }\\r\\n    create() {\\r\\n        this.game.stage.backgroundColor = '#000033';\\r\\n        if(typeof this.config.background === 'string'){\\r\\n            let bg = this.game.add.image(0, 0, 'bg');\\r\\n            bg.height = this.game.height;\\r\\n            bg.width = this.game.width;\\r\\n        }\\r\\n        if(typeof this.config.logo === 'string'){\\r\\n            let logo = this.game.add.image(this.game.world.centerX, this.game.world.centerY -400, 'logo');\\r\\n            logo.anchor.set(0.5);\\r\\n        }\\r\\n\\r\\n        let style = { font: \\\"32px KenVector Future\\\", fill: \\\"#ffffff\\\", align: \\\"center\\\" };\\r\\n        let offSet = 0;\\r\\n\\r\\n        this._rankings = this.score.ranking.map((rank)=>{\\r\\n            let name = this.game.add.text(150, 250 + offSet, rank.name, style);\\r\\n            name.stroke = '#26D8D7';\\r\\n            name.strokeThickness = 6;\\r\\n\\r\\n            let score = this.game.add.text(950, 250 + offSet, rank.score, style);\\r\\n            score.stroke = '#26D8D7';\\r\\n            score.strokeThickness = 6;\\r\\n\\r\\n\\r\\n            offSet = offSet + 70;\\r\\n            return {name: name, score: score}\\r\\n        });\\r\\n\\r\\n        this.goBack = this.game.add.text(this.game.world.centerX, this.game.world.centerY +450, '- Hit fire to go back -', style);\\r\\n        this.goBack.anchor.set(0.5);\\r\\n        this.goBack.stroke = '#26D8D7';\\r\\n        this.goBack.strokeThickness = 6;\\r\\n    }\\r\\n    update () {\\r\\n        handleInput(this);\\r\\n        blinkTimer++\\r\\n        if(blinkTimer >= blinkVelocity){\\r\\n            this.goBack.visible = !this.goBack.visible;\\r\\n            blinkTimer = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\n\\n//# sourceURL=webpack://someLibName/./src/js/showScore.js?\");\n\n/***/ })\n\n/******/ });\n});\n\n//# sourceURL=webpack:///./node_modules/capmanhighscore/dist/index.js?");

/***/ }),

/***/ "./src/js/characters/boss.js":
/*!***********************************!*\
  !*** ./src/js/characters/boss.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Boss; });\nconst fireLocations = [\r\n    {\r\n        x:275,\r\n        y:1024\r\n    },\r\n    {\r\n        x:550,\r\n        y:1024\r\n    },\r\n    {\r\n        x:825,\r\n        y:1024\r\n    },\r\n    {\r\n        x:1100,\r\n        y:1024\r\n    }\r\n]\r\n\r\nclass Boss extends Phaser.Sprite {\r\n    constructor(game, halfLifeInterventionCB) {\r\n        super(game, 200, 200, 'boss1');\r\n        this.game = game;\r\n        this.tween = game.add.tween(this).to( { x: 800 }, 4000, Phaser.Easing.Linear.None, true, 0, 1000, true);\r\n        game.physics.enable(this, Phaser.Physics.ARCADE);\r\n        this.firingTimer = game.time.now + 4000\r\n        this.health = 10;\r\n        this.halfLifeIntervention = 5;\r\n        this.halfLifeInterventionCB = halfLifeInterventionCB;\r\n\r\n        this.bullets = this.game.add.group();\r\n        this.bullets.enableBody = true;\r\n        this.bullets.physicsBodyType = Phaser.Physics.ARCADE;\r\n        this.bullets.createMultiple(60, 'enemyBullet');\r\n        this.bullets.setAll('anchor.x', 0.5);\r\n        this.bullets.setAll('anchor.y', 1);\r\n        this.bullets.setAll('outOfBoundsKill', true);\r\n        this.bullets.setAll('checkWorldBounds', true);\r\n    }\r\n    bossFire(){\r\n        //  Grab the first bullet we can from the pool\r\n        fireLocations.forEach((location)=>{\r\n            let bullet = this.bullets.getFirstExists(false);\r\n            bullet.reset(this.body.center.x, this.body.center.y);\r\n            this.game.physics.arcade.moveToXY(bullet,location.x + this.game.rnd.integerInRange(0,100),location.y, 120);\r\n        })\r\n\r\n        this.firingTimer = this.game.time.now + this.game.rnd.integerInRange(300,5000);\r\n    }\r\n    update(){\r\n        if (this.game.time.now > this.firingTimer && this.alive) {\r\n            this.bossFire();\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/js/characters/boss.js?");

/***/ }),

/***/ "./src/js/characters/hero.js":
/*!***********************************!*\
  !*** ./src/js/characters/hero.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Hero; });\nconst getDefaultSettings = function(game){\r\n    return {\r\n        ship: 'ship1',\r\n        player: 'one',\r\n        positionHUD: 'left',\r\n        lives: 3,\r\n        spawnPosition: {\r\n            x: 640,\r\n            y: 900\r\n        },\r\n        keys: game.input.keyboard.addKeys({\r\n            left: Phaser.KeyCode.LEFT,\r\n            right: Phaser.KeyCode.RIGHT,\r\n            fire: Phaser.KeyCode.CONTROL\r\n        })\r\n    };\r\n}\r\n\r\nclass Hero extends Phaser.Sprite {\r\n    constructor(game, settings = getDefaultSettings(game)) {\r\n        super(game, settings.spawnPosition.x, settings.spawnPosition.y, settings.ship);\r\n        this.settings = settings\r\n        this.score = 0;\r\n        this.scale.setTo(0.45, 0.45);\r\n        this.anchor.setTo(0.5, 0.5);\r\n        this.hasShield = false;\r\n        \r\n        game.physics.enable(this, Phaser.Physics.ARCADE);\r\n        this.body.collideWorldBounds = true;\r\n\r\n        this.lives = game.add.group();\r\n        this.bulletTime= 0;\r\n        \r\n        //give hero random color tint\r\n       // this.tint = Math.floor(Math.random() * 1000) * 0xffffff;\r\n        \r\n        //  Our bullet group\r\n        this.bullets = game.add.group();\r\n        this.bullets.enableBody = true;\r\n        this.bullets.physicsBodyType = Phaser.Physics.ARCADE;\r\n        this.bullets.createMultiple(30, 'bullet');\r\n        this.bullets.setAll('anchor.x', 0.5);\r\n        this.bullets.setAll('anchor.y', 1);\r\n        this.bullets.setAll('outOfBoundsKill', true);\r\n        this.bullets.setAll('checkWorldBounds', true);\r\n\r\n        //this.alive = true\r\n        this.createLives(settings.lives);\r\n    }\r\n    update(){\r\n        if (this.alive)\r\n        {\r\n            //  Reset the player, then check for movement keys\r\n            this.body.velocity.setTo(0, 0);\r\n    \r\n            if (this.settings.keys.left.isDown)\r\n            {\r\n                this.body.velocity.x = -200;\r\n            }\r\n            else if (this.settings.keys.right.isDown)\r\n            {\r\n                this.body.velocity.x = 200;\r\n            }\r\n\r\n            //  Firing?\r\n            if (this.settings.keys.fire.isDown)\r\n            {\r\n                this.fireBullet();\r\n            }\r\n\r\n\r\n            if(this.hasShield && this.shieldTimer < this.game.time.now){\r\n                this.hasShield = false;\r\n                this.tint = 0xffffff;\r\n            }\r\n        }\r\n    }\r\n    createLives(amount = 0 ){\r\n        if(this.settings.positionHUD === 'left'){\r\n            this.scoreText = this.game.add.text(10, 10, `Score: ${this.score}`, { font: '34px Arial', fill: '#fff' });\r\n            this.statusText = this.game.add.text(10, 60, ``, { font: '34px Arial', fill: '#fff' });\r\n        }else{\r\n            this.scoreText = this.game.add.text(this.game.world.width - 230, 10, `Score: ${this.score}`, { font: '34px Arial', fill: '#fff' });\r\n            this.statusText = this.game.add.text(this.game.world.width - 230, 60, ``, { font: '34px Arial', fill: '#fff' });\r\n        }\r\n        \r\n\r\n        for (var i = 0; i < amount; i++) \r\n        {\r\n            let ship;\r\n            if(this.settings.positionHUD === 'left'){\r\n                ship = this.lives.create(30 + (30 * i), 80, this.settings.ship);\r\n            } else {\r\n                ship = this.lives.create(this.game.world.width - 100 + (30 * i), 60, this.settings.ship);\r\n            }\r\n            \r\n            ship.scale.setTo(0.15, 0.15);\r\n            ship.anchor.setTo(0.5, 0.5);\r\n            ship.angle = 90;\r\n            ship.alpha = 0.4;\r\n        }\r\n    }\r\n    fireBullet(){\r\n        //  To avoid them being allowed to fire too fast we set a time limit\r\n        if (this.game.time.now > this.bulletTime)\r\n        {\r\n            //  Grab the first bullet we can from the pool\r\n            let bullet = this.bullets.getFirstExists(false);\r\n\r\n            if (bullet)\r\n            {\r\n                //  And fire it\r\n                this.game._sfx.shot.play();\r\n                bullet.reset(this.x, this.y + 8);\r\n                bullet.body.velocity.y = -400;\r\n                bullet.fromPlayer = this.settings.player;\r\n                this.bulletTime = this.game.time.now + 400;\r\n            }\r\n        }\r\n    }\r\n}\n\n//# sourceURL=webpack:///./src/js/characters/hero.js?");

/***/ }),

/***/ "./src/js/levels/bossLevel.js":
/*!************************************!*\
  !*** ./src/js/levels/bossLevel.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MainLevel; });\n/* harmony import */ var _characters_hero__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../characters/hero */ \"./src/js/characters/hero.js\");\n/* harmony import */ var _characters_boss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../characters/boss */ \"./src/js/characters/boss.js\");\n\r\n\r\nfunction setDummyInputs(context) {\r\n    var inputOne = {\r\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.UP).isDown,\r\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).isDown,\r\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).isDown,\r\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.ALT).isDown,\r\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).isDown,\r\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.P).isDown,\r\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.Z).isDown,\r\n    };\r\n    var inputTwo = {\r\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.R).isDown,\r\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.F).isDown,\r\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.Q).isDown,\r\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.S).isDown,\r\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.W).isDown,\r\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.K).isDown,\r\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.I).isDown\r\n    };\r\n}\r\n\r\nfunction bossColision (boss, bullet) {\r\n\r\n    bullet.kill();\r\n\r\n    if(bullet.fromPlayer === 'one') {\r\n        this.player.score += 5;\r\n        this.player.scoreText.text = `Score: ${this.player.score}`;\r\n    } else if(bullet.fromPlayer === 'two') {\r\n        this.playerTwo.score += 5;\r\n        this.playerTwo.scoreText.text = `Score: ${this.playerTwo.score}`;\r\n    }\r\n\r\n    this.game._sfx.impact.play();\r\n    let explosion = this.explosions.getFirstExists(false);\r\n\r\n    explosion.reset(bullet.body.x, bullet.body.y);\r\n    explosion.play('kaboom', 30, false, true);\r\n    boss.health --;\r\n\r\n    if(boss.health === boss.halfLifeIntervention){\r\n        boss.halfLifeInterventionCB(boss);\r\n    }\r\n\r\n    if(boss.health === 0){\r\n        let explosionOne = this.explosions.getFirstExists(false);\r\n        explosionOne.scale.setTo(2, 2);\r\n        explosionOne.reset(boss.body.center.x, boss.body.center.y);\r\n        explosionOne.play('kaboom', 30, false, true);\r\n        this.game.camera.shake(0.005, 500);\r\n        boss.kill();\r\n        this.endGameTimer = this.game.time.now + 600;\r\n    }\r\n}\r\n\r\nfunction endGame (context, playersDeath){\r\n    context.game._sfx.boss.stop();\r\n\r\n    console.log('endGame');\r\n    console.log(context.levelConfig.endGame )\r\n\r\n    if(context.levelConfig.endGame || playersDeath){\r\n        context.levelConfig.endGame = false;\r\n        let gstateText = context.game.add.text(context.game.world.centerX,context.game.world.centerY,'Game Over ', { font: '84px Arial', fill: '#fff' });\r\n        gstateText.anchor.setTo(0.5, 0.5);\r\n\r\n        if(context.levelConfig.players === 2){\r\n            if(context.score.isScoreMoreThenLast(context.player.score)){\r\n                context.game._sfx.mainMenu.play();\r\n                context.game.state.start('enterName', true, false, context.score, context.player.score, ()=>{\r\n                    if(context.score.isScoreMoreThenLast(context.playerTwo.score)){\r\n                        context.game.state.start('enterName', true, false, context.score, context.playerTwo.score, ()=>{\r\n                            context.game.state.start('showScore', true, false, context.score);\r\n                        });\r\n                    } else {\r\n                        context.game._sfx.mainMenu.play();\r\n                        context.game.state.start('showScore', true, false, context.score);\r\n                    }\r\n                });\r\n            } else if(context.score.isScoreMoreThenLast(context.playerTwo.score)){\r\n                context.game._sfx.mainMenu.play();\r\n                context.game.state.start('enterName', true, false, context.score, context.playerTwo.score, ()=>{\r\n                    context.game.state.start('showScore', true, false, context.score);\r\n                });\r\n            } else {\r\n                context.game._sfx.mainMenu.play();\r\n                context.game.state.start('showScore', true, false, context.score); \r\n            }\r\n        } else {\r\n            if(context.score.isScoreMoreThenLast(context.player.score)){\r\n                console.log('high score');\r\n                context.game._sfx.mainMenu.play();\r\n                context.game.state.start('enterName', true, false, context.score, context.player.score, ()=>{\r\n                    context.game.state.start('showScore', true, false, context.score);\r\n                });\r\n            } else {\r\n                console.log('no high score');\r\n                context.game._sfx.mainMenu.play();\r\n                context.game.state.start('showScore', true, false, context.score); \r\n            }\r\n        }\r\n    } else {\r\n        if(context.levelConfig.players === 2){\r\n            let player = 0;\r\n            let playerTwo = 0;\r\n    \r\n            context.player.lives.forEachAlive(()=>{\r\n                player =  player+1\r\n            })\r\n            context.playerTwo.lives.forEachAlive(()=>{\r\n                playerTwo =  playerTwo+1\r\n            })\r\n            context.game.state.start('main1', true, false, \r\n            {\r\n                players: context.levelConfig.players,\r\n                playerScore: context.player.score,\r\n                playerTwoScore: context.playerTwo.score,\r\n                playerLives: player,\r\n                playerTwoLives: playerTwo,\r\n                shootSpeed: 1000, \r\n                endGame: true\r\n            }, context.score);\r\n        } else {\r\n            console.log('no endGame')\r\n            let player = 0;\r\n    \r\n            context.player.lives.forEachAlive(()=>{\r\n                player =  player+1\r\n            })\r\n            console.log('starting main1');\r\n            context.game.state.start('main1', true, false, \r\n                {\r\n                    players: context.levelConfig.players,\r\n                    playerScore: context.player.score,\r\n                    playerLives: player,\r\n                    shootSpeed: 1000, \r\n                    endGame: true\r\n                }, \r\n                context.score);\r\n        }\r\n    }\r\n}\r\n\r\nfunction setupInvader (invader) {\r\n\r\n    invader.anchor.x = 0.5;\r\n    invader.anchor.y = 0.5;\r\n    invader.animations.add('kaboom');\r\n\r\n}\r\n\r\nfunction enemyHitsPlayer (player,bullet) {\r\n    \r\n    bullet.kill();\r\n\r\n    let live = player.lives.getFirstAlive();\r\n    if (live && !player.hasShield)\r\n    {\r\n        player.kill();\r\n        live.kill();\r\n    }\r\n\r\n    //  And create an explosion :)\r\n    this.game._sfx.impact.play();\r\n    var explosion = this.explosions.getFirstExists(false);\r\n    explosion.reset(player.body.x, player.body.y);\r\n    explosion.play('kaboom', 30, false, true);\r\n\r\n    // When the player dies\r\n    if (player.lives.countLiving() < 1)\r\n    {\r\n        player.kill();\r\n        player.statusText.text = 'No more lives';\r\n    }else {\r\n        if(!player.hasShield){\r\n            player.reviveAble = true;\r\n            player.revivePenalty = this.game.time.now + 3000;\r\n        }\r\n    }\r\n\r\n    if(this.levelConfig.players === 2){\r\n        if(this.player.lives.countLiving() <1 && this.playerTwo.lives.countLiving() <1){\r\n            endGame(this, true);\r\n        }\r\n    } else {\r\n        if(this.player.lives.countLiving() <1 ){\r\n            endGame(this, true);\r\n        }\r\n    }\r\n}\r\n\r\nclass MainLevel {\r\n    constructor() {\r\n        this.player;\r\n        this.bullets;\r\n        this.bulletTime = 0;\r\n        this.cursors;\r\n        this.fireButton;\r\n        this.explosions;\r\n        this.starfield;\r\n        this.lives;\r\n        this.enemyBullet;\r\n        this.firingTimer = 0;\r\n        this.stateText;\r\n        this.livingEnemies = [];\r\n        this.waveCounter = 0;\r\n    }\r\n    preload() {\r\n        this.game.load.image('bullet', 'assets/img/bullet.png');\r\n        this.game.load.image('boss1', 'assets/img/boss1.svg');\r\n        this.game.load.image('enemyBullet', 'assets/img/enemy-bullet.png');\r\n        this.game.load.image('invader4', 'assets/img/bug4.svg');\r\n        this.game.load.spritesheet('kaboom', 'assets/img/explode.png', 128, 128);\r\n        this.game.load.image('starfield', 'assets/img/starfield.png');\r\n    }\r\n    init(config, score) {\r\n        this.game.renderer.renderSession.roundPixels = true;\r\n        this.levelConfig = config;\r\n        this.score = score;\r\n    }\r\n    create() {\r\n        this.endGameTimer = undefined;\r\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n        setDummyInputs(this);\r\n        //  The scrolling starfield background\r\n        this.starfield = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield');\r\n        //this.starfield.tint = (Math.floor(Math.random() * 1000)+700) * 0xffffff;    \r\n        //  The hero!\r\n        this.player =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\r\n            ship: 'ship1',\r\n            player: 'one',\r\n            lives: this.levelConfig.playerLives,\r\n            positionHUD: 'left',\r\n            spawnPosition: {\r\n                x: 240,\r\n                y: 900\r\n            },\r\n            keys: this.game.input.keyboard.addKeys({\r\n                left: Phaser.KeyCode.LEFT,\r\n                right: Phaser.KeyCode.RIGHT,\r\n                fire: Phaser.KeyCode.CONTROL\r\n            })\r\n        });\r\n        this.player.score = this.player.score + this.levelConfig.playerScore;\r\n        this.game.add.existing(this.player);\r\n        if(this.levelConfig.players === 2) {\r\n            this.playerTwo =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\r\n                ship: 'ship2',\r\n                player: 'two',\r\n                lives: this.levelConfig.playerTwoLives,\r\n                positionHUD: 'right',\r\n                spawnPosition: {\r\n                    x: 1040,\r\n                    y: 900\r\n                },\r\n                keys: this.game.input.keyboard.addKeys({\r\n                    left: Phaser.KeyCode.D,\r\n                    right: Phaser.KeyCode.G,\r\n                    fire: Phaser.KeyCode.A\r\n                })\r\n            });\r\n            this.playerTwo.score = this.playerTwo.score + this.levelConfig.playerTwoScore;\r\n            this.game.add.existing(this.playerTwo);\r\n        }\r\n        \r\n        this.boss = new _characters_boss__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.game, function(bosje){\r\n            bosje.tween.timeScale =1.2;\r\n        });\r\n        this.game.add.existing(this.boss);\r\n    \r\n        //  An explosion pool\r\n        this.explosions = this.game.add.group();\r\n        this.explosions.createMultiple(30, 'kaboom');\r\n        this.explosions.forEach(setupInvader, this);\r\n        this.game._sfx.boss.loop = true;\r\n        this.game._sfx.boss.play();\r\n\r\n\r\n\r\n                // The enemy's bullets\r\n        this.enemyBullets = this.game.add.group();\r\n        this.enemyBullets.enableBody = true;\r\n        this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;\r\n        this.enemyBullets.createMultiple(30, 'enemyBullet');\r\n        this.enemyBullets.setAll('anchor.x', 0.5);\r\n        this.enemyBullets.setAll('anchor.y', 1);\r\n        this.enemyBullets.setAll('outOfBoundsKill', true);\r\n        this.enemyBullets.setAll('checkWorldBounds', true);\r\n\r\n    }\r\n    update () {\r\n        this.starfield.tilePosition.y += 2;\r\n\r\n        this.game.physics.arcade.overlap(this.player.bullets, this.boss, bossColision, null, this);\r\n        this.game.physics.arcade.overlap(this.boss.bullets, this.player, enemyHitsPlayer, null, this);\r\n\r\n        if(this.player.reviveAble && this.player.revivePenalty < this.game.time.now){\r\n            this.player.revive();\r\n            this.player.tint = 500 * 0xffffff;\r\n            this.player.reviveAble = false;\r\n            this.player.hasShield = true;\r\n            this.player.shieldTimer = this.game.time.now + 2000;\r\n        }\r\n\r\n        if(this.levelConfig.players === 2) {\r\n            this.game.physics.arcade.overlap(this.playerTwo.bullets, this.boss, bossColision, null, this);\r\n            this.game.physics.arcade.overlap(this.boss.bullets, this.playerTwo, enemyHitsPlayer, null, this);\r\n            if(this.playerTwo.reviveAble && this.playerTwo.revivePenalty < this.game.time.now){\r\n                this.playerTwo.revive();\r\n                this.playerTwo.tint = 500 * 0xffffff;\r\n                this.playerTwo.reviveAble = false;\r\n                this.playerTwo.hasShield = true;\r\n                this.playerTwo.shieldTimer = this.game.time.now + 2000;\r\n            }\r\n        }\r\n        if(this.game.time.now >= this.endGameTimer){\r\n            console.log('Ending game because of endGameTimer')\r\n            endGame(this);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/levels/bossLevel.js?");

/***/ }),

/***/ "./src/js/levels/mainLevel.js":
/*!************************************!*\
  !*** ./src/js/levels/mainLevel.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MainLevel; });\n/* harmony import */ var _characters_hero__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../characters/hero */ \"./src/js/characters/hero.js\");\n\r\n\r\nfunction setDummyInputs(context) {\r\n    var inputOne = {\r\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.UP).isDown,\r\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.DOWN).isDown,\r\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR).isDown,\r\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.ALT).isDown,\r\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.SHIFT).isDown,\r\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.P).isDown,\r\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.Z).isDown,\r\n    };\r\n    var inputTwo = {\r\n        \"up\": context.game.input.keyboard.addKey(Phaser.Keyboard.R).isDown,\r\n        \"down\": context.game.input.keyboard.addKey(Phaser.Keyboard.F).isDown,\r\n        \"white\": context.game.input.keyboard.addKey(Phaser.Keyboard.Q).isDown,\r\n        \"black\": context.game.input.keyboard.addKey(Phaser.Keyboard.S).isDown,\r\n        \"blue1\": context.game.input.keyboard.addKey(Phaser.Keyboard.W).isDown,\r\n        \"blue2\": context.game.input.keyboard.addKey(Phaser.Keyboard.K).isDown,\r\n        \"blue3\": context.game.input.keyboard.addKey(Phaser.Keyboard.I).isDown\r\n    };\r\n}\r\n\r\nfunction createAliens (context, invaderType) {\r\n    let xMultiply = 68, yMultiply =70;\r\n    let scale = 0.35;\r\n    let tweenX = 550;\r\n\r\n    if(invaderType === 1){\r\n        xMultiply = 78; \r\n        //yMultiply =90;\r\n        scale = 0.25;\r\n        tweenX = 500\r\n    }\r\n\r\n    if(invaderType === 2){\r\n        xMultiply = 78; \r\n        //yMultiply =90;\r\n        scale = 0.25;\r\n        tweenX = 500\r\n    }\r\n\r\n    if(invaderType === 3){\r\n        xMultiply = 85; \r\n        //yMultiply =90;\r\n        scale = 0.35;\r\n        tweenX = 500\r\n    }\r\n\r\n    for (var y = 0; y < 4; y++)\r\n    {\r\n        for (var x = 0; x < 11; x++)\r\n        {\r\n            var alien = context.aliens.create(x * xMultiply, y * yMultiply, 'invader'+invaderType);\r\n            alien.scale.setTo(scale, scale);\r\n            alien.anchor.setTo(0.5, 0.5);\r\n            //alien.animations.add('fly', [ 0, 1, 2, 3 ], 20, true);\r\n            //alien.play('fly');\r\n            // if(tint){\r\n            //     alien.tint = tint\r\n            // }\r\n            \r\n            alien.body.moves = false;\r\n        }\r\n    }\r\n\r\n    context.aliens.x = 100;\r\n    context.aliens.y = 50;\r\n\r\n    //  All this does is basically start the invaders moving. Notice we're moving the Group they belong to, rather than the invaders directly.\r\n    var tween = context.game.add.tween(context.aliens).to( { x: tweenX }, 4000, Phaser.Easing.Linear.None, true, 0, 1000, true);\r\n    tween.onRepeat.add(()=>{context.aliens.y += 30;}, this);\r\n}\r\n\r\nfunction enemyFires (context) {\r\n\r\n    //  Grab the first bullet we can from the pool\r\n    let enemyBullet = context.enemyBullets.getFirstExists(false);\r\n\r\n    context.livingEnemies.length=0;\r\n\r\n    context.aliens.forEachAlive(function(alien){\r\n\r\n        // put every living enemy in an array\r\n        context.livingEnemies.push(alien);\r\n    });\r\n\r\n\r\n    if (enemyBullet && context.livingEnemies.length > 0) {\r\n        \r\n        var random= context.game.rnd.integerInRange(0,context.livingEnemies.length-1);\r\n\r\n        // randomly select one of them\r\n        var shooter=context.livingEnemies[random];\r\n        // And fire the bullet from this enemy\r\n        enemyBullet.reset(shooter.body.x, shooter.body.y);\r\n\r\n        let randomPlayer = Math.floor(Math.random() * 2)+1;\r\n\r\n        if(context.levelConfig.players === 1){\r\n            randomPlayer = 1;\r\n        }\r\n\r\n        if(randomPlayer === 1){\r\n            context.game.physics.arcade.moveToObject(enemyBullet,context.player,120);\r\n        } else {\r\n            context.game.physics.arcade.moveToObject(enemyBullet,context.playerTwo,120);\r\n        }\r\n        let shootspeed = context.levelConfig.shootSpeed || 2000;\r\n        context.firingTimer = context.game.time.now + shootspeed;\r\n    }\r\n\r\n}\r\n\r\nfunction setupInvader (invader) {\r\n\r\n    invader.anchor.x = 0.5;\r\n    invader.anchor.y = 0.5;\r\n    invader.animations.add('kaboom');\r\n\r\n}\r\n\r\nfunction createBlindWalls(context){\r\n\r\n    for (var i = 0; i < 75; i++) { \r\n        let sprite = context.enemyWalls.create(20*i, 865, 'invisible-wall');    \r\n        // physic properties\r\n        context.game.physics.enable(sprite);\r\n        sprite.body.immovable = true;\r\n        sprite.body.allowGravity = false;\r\n    }\r\n}\r\n\r\nfunction enemyHitsWall (){\r\n    if(this.levelConfig.players === 2){\r\n        if(this.score.isScoreMoreThenLast(this.player.score)){\r\n            this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\r\n                if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\r\n                    this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\r\n                        this.game.state.start('showScore', true, false, this.score);\r\n                    });\r\n                } else {\r\n                    this.game.state.start('showScore', true, false, this.score);\r\n                }\r\n            });\r\n        } else if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\r\n            this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\r\n                this.game.state.start('showScore', true, false, this.score);\r\n            });\r\n        }\r\n        else {\r\n            this.game.state.start('showScore', true, false, this.score); \r\n        }\r\n    } else {\r\n        if(this.score.isScoreMoreThenLast(this.player.score)){\r\n            this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\r\n                this.game.state.start('showScore', true, false, this.score);\r\n            });\r\n        } else {\r\n            this.game.state.start('showScore', true, false, this.score); \r\n        }\r\n\r\n    }    \r\n\r\n}\r\n\r\nfunction collisionHandler (bullet, alien) {\r\n\r\n    //  When a bullet hits an alien we kill them both\r\n    bullet.kill();\r\n    alien.kill();\r\n    //  Increase the score\r\n    if(bullet.fromPlayer === 'one') {\r\n        this.player.score += 20;\r\n        this.player.scoreText.text = `Score: ${this.player.score}`;\r\n    } else if(bullet.fromPlayer === 'two') {\r\n        this.playerTwo.score += 20;\r\n        this.playerTwo.scoreText.text = `Score: ${this.playerTwo.score}`;\r\n    }\r\n        \r\n\r\n    //  And create an explosion :)\r\n    this.game._sfx.impact.play();\r\n    var explosion = this.explosions.getFirstExists(false);\r\n    explosion.reset(alien.body.x, alien.body.y);\r\n    explosion.play('kaboom', 30, false, true);\r\n\r\n    if (this.aliens.countLiving() == 0) {\r\n        this.player.bullets.callAll('kill');\r\n        if(this.levelConfig.players === 2){\r\n            this.playerTwo.bullets.callAll('kill');\r\n        }\r\n        this.enemyBullets.callAll('kill');\r\n        //score += 1000;\r\n        //scoreText.text = scoreString + score;\r\n\r\n        //enemyBullets.callAll('kill',this);\r\n        //stateText.text = \" You Won, \\n Click to restart\";\r\n        //stateText.visible = true;\r\n\r\n        //the \"click to restart\" handler\r\n        //game.input.onTap.addOnce(restart,this);\r\n        if(this.waveCounter ===2){\r\n            if(this.levelConfig.players === 2){\r\n                console.log('waves finished');\r\n                let player = 0;\r\n                let playerTwo = 0;\r\n\r\n                this.player.lives.forEachAlive(()=>{\r\n                    player =  player+1\r\n                })\r\n                this.playerTwo.lives.forEachAlive(()=>{\r\n                    playerTwo =  playerTwo+1\r\n                })\r\n                this.gameEnded = true;\r\n                this.game._sfx.bodenLoop.stop();\r\n                this.game._sfx.boden.stop();\r\n                console.log('starting bossLevel');\r\n                this.game.state.start('bossLevel', true, false, {\r\n                    players: this.levelConfig.players,\r\n                    playerScore: this.player.score,\r\n                    playerTwoScore: this.player.score,\r\n                    playerLives: player,\r\n                    playerTwoLives: playerTwo,\r\n                    endGame: this.levelConfig.endGame \r\n                }, this.score);\r\n            } else {\r\n                console.log('wave levelConfig.endGame');\r\n                console.log(this.levelConfig.endGame);\r\n\r\n                let player = 0;\r\n                this.player.lives.forEachAlive(()=>{\r\n                    player =  player+1\r\n                })\r\n                this.gameEnded = true;\r\n                this.game._sfx.bodenLoop.stop();\r\n                this.game._sfx.boden.stop();\r\n                console.log('starting bossLevel');\r\n                this.game.state.start('bossLevel', true, false, {\r\n                    players: this.levelConfig.players,\r\n                    playerScore: this.player.score,\r\n                    playerLives: player,\r\n                    endGame: this.levelConfig.endGame \r\n                }, this.score); \r\n            }\r\n        } else {\r\n            console.log('starting next wave')\r\n            this.waveCounter++;\r\n            createAliens(this, this.waveCounter);\r\n        }\r\n    }\r\n}\r\n\r\nfunction enemyHitsPlayer (player,bullet) {\r\n    \r\n    bullet.kill();\r\n\r\n    let live = player.lives.getFirstAlive();\r\n    if (live && !player.hasShield)\r\n    {\r\n        player.kill();\r\n        live.kill();\r\n    }\r\n\r\n    //  And create an explosion :)\r\n    this.game._sfx.impact.play();\r\n    var explosion = this.explosions.getFirstExists(false);\r\n    explosion.reset(player.body.x, player.body.y);\r\n    explosion.play('kaboom', 30, false, true);\r\n\r\n    // When the player dies\r\n    if (player.lives.countLiving() < 1)\r\n    {\r\n        player.kill();\r\n        player.statusText.text = 'No more lives';\r\n    }else {\r\n        if(!player.hasShield){\r\n            player.reviveAble = true;\r\n            player.revivePenalty = this.game.time.now + 3000;\r\n        }\r\n    }\r\n\r\n    if(this.levelConfig.players === 2){\r\n        if(this.player.lives.countLiving() <1 && this.playerTwo.lives.countLiving() <1){\r\n            let gstateText = this.game.add.text(this.game.world.centerX,this.game.world.centerY,'Game OVer ', { font: '84px Arial', fill: '#fff' });\r\n            gstateText.anchor.setTo(0.5, 0.5);\r\n            this.gameEnded = true;\r\n            this.game._sfx.bodenLoop.stop();\r\n            this.game._sfx.boden.stop();\r\n            if(this.score.isScoreMoreThenLast(this.player.score)){\r\n                this.game._sfx.mainMenu.play();\r\n                this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\r\n                    if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\r\n                        this.game._sfx.mainMenu.play();\r\n                        this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\r\n                            this.game.state.start('showScore', true, false, this.score);\r\n                        });\r\n                    } else {\r\n                        this.game._sfx.mainMenu.play();\r\n                        this.game.state.start('showScore', true, false, this.score);\r\n                    }\r\n                });\r\n            } else if(this.score.isScoreMoreThenLast(this.playerTwo.score)){\r\n                this.game._sfx.mainMenu.play();\r\n                this.game.state.start('enterName', true, false, this.score, this.playerTwo.score, ()=>{\r\n                    this.game.state.start('showScore', true, false, this.score);\r\n                });\r\n            }\r\n            else {\r\n                this.game._sfx.mainMenu.play();\r\n                this.game.state.start('showScore', true, false, this.score); \r\n            }\r\n\r\n\r\n        }\r\n    } else {\r\n        if(this.player.lives.countLiving() <1 ){\r\n            let gstateText = this.game.add.text(this.game.world.centerX,this.game.world.centerY,'Game OVer ', { font: '84px Arial', fill: '#fff' });\r\n            gstateText.anchor.setTo(0.5, 0.5);\r\n            this.gameEnded = true;\r\n            this.game._sfx.bodenLoop.stop();\r\n            this.game._sfx.boden.stop();\r\n            \r\n            if(this.score.isScoreMoreThenLast(this.player.score)){\r\n                this.game._sfx.mainMenu.play();\r\n                this.game.state.start('enterName', true, false, this.score, this.player.score, ()=>{\r\n                    this.game.state.start('showScore', true, false, this.score);\r\n                });\r\n            } else {\r\n                this.game._sfx.mainMenu.play();\r\n                this.game.state.start('showScore', true, false, this.score); \r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nclass MainLevel {\r\n    constructor() {\r\n        this.player;\r\n        this.aliens;\r\n        this.bullets;\r\n        this.bulletTime = 0;\r\n        this.cursors;\r\n        this.fireButton;\r\n        this.explosions;\r\n        this.starfield;\r\n        this.lives;\r\n        this.enemyBullet;\r\n        this.firingTimer = 0;\r\n        this.stateText;\r\n        this.livingEnemies = [];\r\n        this.waveCounter = 0;\r\n    }\r\n    preload() {\r\n        this.game.load.image('bullet', 'assets/img/bullet.png');\r\n        this.game.load.image('enemyBullet', 'assets/img/enemy-bullet.png');\r\n        this.game.load.image('invader1', 'assets/img/bug1.svg');\r\n        this.game.load.image('invader2', 'assets/img/bug2.svg');\r\n        this.game.load.image('invader3', 'assets/img/bug3.svg');\r\n        this.game.load.image('invader4', 'assets/img/bug4.svg');\r\n        this.game.load.spritesheet('kaboom', 'assets/img/explode.png', 128, 128);\r\n        this.game.load.image('starfield', 'assets/img/starfield2.png');\r\n        this.game.load.image('starfield2', 'assets/img/starfield3.png');\r\n        this.game.load.image('invisible-wall', 'assets/img/invisible_wall.png');\r\n    }\r\n    init(config, score) {\r\n        this.game.renderer.renderSession.roundPixels = true;\r\n        this.levelConfig = config;\r\n        this.score = score;\r\n        console.log(this.levelConfig, this.score);\r\n    }\r\n\r\n    reset() {\r\n        this.waveCounter = 0;\r\n    }\r\n\r\n    create() {\r\n        this.reset()\r\n        this.game.stage.backgroundColor = \"#000000\";\r\n        \r\n    \r\n        this.game.physics.startSystem(Phaser.Physics.ARCADE);\r\n    \r\n        //  The scrolling starfield background\r\n        this.starfield = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield');\r\n        this.starfield2 = this.game.add.tileSprite(0, 0, 1280, 1024, 'starfield2');\r\n        setDummyInputs(this);\r\n        //  The hero!\r\n        this.player =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\r\n            ship: 'ship1',\r\n            player: 'one',\r\n            lives: this.levelConfig.playerLives || 3,\r\n            positionHUD: 'left',\r\n            spawnPosition: {\r\n                x: 240,\r\n                y: 900\r\n            },\r\n            keys: this.game.input.keyboard.addKeys({\r\n                left: Phaser.KeyCode.LEFT,\r\n                right: Phaser.KeyCode.RIGHT,\r\n                fire: Phaser.KeyCode.CONTROL\r\n            })\r\n        });\r\n        let addedScore = this.levelConfig.playerScore ||0;\r\n        this.player.score = this.player.score + addedScore;\r\n        this.game.add.existing(this.player);\r\n        if(this.levelConfig.players === 2) {\r\n            this.playerTwo =  new _characters_hero__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.game, {\r\n                ship: 'ship2',\r\n                player: 'two',\r\n                //lives: 3,\r\n                lives: this.levelConfig.playerLives || 3,\r\n                positionHUD: 'right',\r\n                spawnPosition: {\r\n                    x: 1040,\r\n                    y: 900\r\n                },\r\n                keys: this.game.input.keyboard.addKeys({\r\n                    left: Phaser.KeyCode.D,\r\n                    right: Phaser.KeyCode.G,\r\n                    fire: Phaser.KeyCode.A\r\n                })\r\n            });\r\n            let addedScorepTwo = this.levelConfig.playerTwoScore || 0\r\n            this.playerTwo.score = this.playerTwo.score + addedScorepTwo;\r\n            this.game.add.existing(this.playerTwo);\r\n        }\r\n\r\n        //  The baddies!\r\n        this.aliens = this.game.add.group();\r\n        this.aliens.enableBody = true;\r\n        this.aliens.physicsBodyType = Phaser.Physics.ARCADE;\r\n    \r\n        createAliens(this, 4);\r\n        //  An explosion pool\r\n        this.explosions = this.game.add.group();\r\n        this.explosions.createMultiple(30, 'kaboom');\r\n        this.explosions.forEach(setupInvader, this);\r\n        this.game._sfx.bodenLoop.loop = true;\r\n\r\n        this.game._sfx.boden.onStop.addOnce( ()=>{\r\n            if(!this.gameEnded){\r\n                this.game._sfx.bodenLoop.play();\r\n            }\r\n            \r\n        });\r\n        this.game._sfx.boden.play();\r\n\r\n        // The enemy's bullets\r\n        this.enemyBullets = this.game.add.group();\r\n        this.enemyBullets.enableBody = true;\r\n        this.enemyBullets.physicsBodyType = Phaser.Physics.ARCADE;\r\n        this.enemyBullets.createMultiple(30, 'enemyBullet');\r\n        this.enemyBullets.setAll('anchor.x', 0.5);\r\n        this.enemyBullets.setAll('anchor.y', 1);\r\n        this.enemyBullets.setAll('outOfBoundsKill', true);\r\n        this.enemyBullets.setAll('checkWorldBounds', true);\r\n\r\n        this.enemyWalls = this.game.add.group();\r\n        this.enemyWalls.visible = false;\r\n        createBlindWalls(this);\r\n    }\r\n\r\n    update () {\r\n        this.starfield.tilePosition.y += 1;\r\n        this.starfield2.tilePosition.y += 2;\r\n\r\n        if (this.game.time.now > this.firingTimer)\r\n        {\r\n            enemyFires(this);\r\n        }\r\n        this.game.physics.arcade.overlap(this.aliens, this.enemyWalls, enemyHitsWall, null, this);\r\n        this.game.physics.arcade.overlap(this.player.bullets, this.aliens, collisionHandler, null, this);\r\n        this.game.physics.arcade.overlap(this.enemyBullets, this.player, enemyHitsPlayer, null, this);\r\n\r\n        if(this.player.reviveAble && this.player.revivePenalty < this.game.time.now){\r\n            this.player.revive();\r\n            this.player.tint = 500 * 0xffffff;\r\n            this.player.reviveAble = false;\r\n            this.player.hasShield = true;\r\n            this.player.shieldTimer = this.game.time.now + 2000;\r\n        }\r\n\r\n        if(this.levelConfig.players === 2) {\r\n            this.game.physics.arcade.overlap(this.enemyBullets, this.playerTwo, enemyHitsPlayer, null, this);\r\n            this.game.physics.arcade.overlap(this.playerTwo.bullets, this.aliens, collisionHandler, null, this);\r\n            if(this.playerTwo.reviveAble && this.playerTwo.revivePenalty < this.game.time.now){\r\n                this.playerTwo.revive();\r\n                this.playerTwo.tint = 500 * 0xffffff;\r\n                this.playerTwo.reviveAble = false;\r\n                this.playerTwo.hasShield = true;\r\n                this.playerTwo.shieldTimer = this.game.time.now + 2000;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/js/levels/mainLevel.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _levels_mainLevel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./levels/mainLevel */ \"./src/js/levels/mainLevel.js\");\n/* harmony import */ var _levels_bossLevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./levels/bossLevel */ \"./src/js/levels/bossLevel.js\");\n/* harmony import */ var capmanhighscore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! capmanhighscore */ \"./node_modules/capmanhighscore/dist/index.js\");\n/* harmony import */ var capmanhighscore__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(capmanhighscore__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\nlet keys = {};\r\n\r\nfunction keyHandle(event) {\r\n  const keyName = event.type;\r\n\r\n  keys[event.key] = event.type === 'keydown';\r\n  if (keys['1'] && keys['2']) {\r\n    const url = \"http://\" + window.location.hostname + \":\" + window.location.port + '/index.html';\r\n    window.location = url;\r\n  }\r\n};\r\n\r\ndocument.addEventListener('keydown', keyHandle);\r\ndocument.addEventListener('keyup', keyHandle);\r\n\r\nlet game = new Phaser.Game(1280, 1024, Phaser.AUTO, 'capManGalaxy');\r\n\r\nlet score = new capmanhighscore__WEBPACK_IMPORTED_MODULE_2__[\"ScoreController\"]({name: 'aTestGame'});\r\n\r\n// const showScore = new ShowScore(\r\n//     {\r\n//         title: 'capman Crashing bugs',\r\n//         background: 'assets/img/Intro_Screen_background.png',\r\n//         logo: 'assets/img/CapmanLogo1.svg'\r\n//     },\r\n//     () =>{\r\n//         game.state.start('mainMenu', true, false);\r\n//     }\r\n// );\r\n//\r\n// const enterName = new EnterName(\r\n//     {\r\n//         title: 'capman Crashing bugs',\r\n//         background: 'assets/img/Intro_Screen_background.png',\r\n//         logo: 'assets/img/CapmanLogo1.svg'\r\n//     }\r\n// );\r\n\r\nlet preloader = {\r\n  preload: function () {\r\n    game.load.image('ship1', 'assets/img/Jet-top.svg');\r\n    game.load.image('ship2', 'assets/img/Jet2-top.svg');\r\n    game.load.audio('sfx:shot', 'assets/audio/shot.wav');\r\n    game.load.audio('sfx:impact', 'assets/audio/impact.wav');\r\n    game.load.audio('sfx:boden', 'assets/audio/Superhero_pack/Superhero_violin.ogg');\r\n    game.load.audio('sfx:bodenLoop', 'assets/audio/Superhero_pack/Superhero_violin_no_intro.ogg');\r\n    game.load.audio('sfx:spacetheme', 'assets/audio/spacetheme.ogg');\r\n    game.load.audio('sfx:bossTheme', 'assets/audio/Continuum.mp3');\r\n  },\r\n  create: function () {\r\n    game._sfx = {\r\n      shot: this.game.add.audio('sfx:shot'),\r\n      impact: this.game.add.audio('sfx:impact'),\r\n      boden: this.game.add.audio('sfx:boden'),\r\n      bodenLoop: this.game.add.audio('sfx:bodenLoop'),\r\n      boss: this.game.add.audio('sfx:bossTheme'),\r\n      mainMenu: this.game.add.audio('sfx:spacetheme')\r\n    };\r\n    this.game._sfx.mainMenu.play();\r\n    // game.state.start('mainMenu', true, false);\r\n  }\r\n};\r\n\r\n// const mainMenu = new GameMenu(\r\n//     {\r\n//         title: 'capman Crashing bugs',\r\n//         background: 'assets/img/Intro_Screen_background.png',\r\n//         logo: 'assets/img/CapmanLogo1.svg',\r\n//         buttons: [\r\n//             {\r\n//                 id: 'onePlayer',\r\n//                 text: '- start one player -'\r\n//             },\r\n//             {\r\n//                 id: 'twoPlayers',\r\n//                 text: '- start two player -'\r\n//             },\r\n//             {\r\n//                 id: 'highScores',\r\n//                 text: '- High scores -'\r\n//             },\r\n//             {\r\n//                 id: 'back',\r\n//                 text: '- Back to launcher -'\r\n//             }\r\n//         ]\r\n//     },\r\n//     (button) =>{\r\n//         console.log(button);\r\n//         let main1 = new MainLevel();\r\n//         let bossLevel = new BossLevel();\r\n//         game.state.add('bossLevel', bossLevel);\r\n//         game.state.add('main1', main1);\r\n//         let players = 1;\r\n//         if(button.id === 'back'){\r\n//             window.history.back();\r\n//         }\r\n//         else if(button.id === 'highScores'){\r\n//             game.state.start('showScore', true, false, score);\r\n//         } else{\r\n//             game._sfx.mainMenu.stop();\r\n//             if(button.id === 'twoPlayers') {\r\n//                 players = 2;\r\n//             }\r\n//             game.state.start('main1', true, false, {players: players}, score);\r\n//         }\r\n//\r\n//     }\r\n// );\r\n\r\nconst startGame = () => {\r\n  let main1 = new _levels_mainLevel__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\r\n  let bossLevel = new _levels_bossLevel__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n  game.state.add('bossLevel', bossLevel);\r\n  game.state.add('main1', main1);\r\n  let players = 1;\r\n  game._sfx.mainMenu.stop();\r\n  game.state.start('main1', true, false, {players: players}, score);\r\n};\r\n\r\n// game.state.add('mainMenu', mainMenu);\r\ngame.state.add('preloader', preloader)\r\n// game.state.add('showScore', showScore);\r\n// game.state.add('enterName', enterName)\r\ngame.state.start('preloader', true, false);\r\n//game.state.start('enterName', true, false, score, 999999);\r\n\r\nwindow.addEventListener('load', function () {\r\n  // hide the game\r\n  document.getElementById('game').style.display = 'none';\r\n  document.getElementById('userwaiting').style.display = 'none';\r\n\r\n  // Fetch all the forms we want to apply custom Bootstrap validation styles to\r\n  var forms = document.getElementsByClassName('needs-validation');\r\n  // Loop over them and prevent submission\r\n  var validation = Array.prototype.filter.call(forms, function (form) {\r\n    form.addEventListener('submit', function (event) {\r\n      if (form.checkValidity() === false) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      } else {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        console.log('Validation OK! Start game.');\r\n        document.getElementById('userform').style.display = 'none';\r\n        document.getElementById('userwaiting').style.display = 'block';\r\n\r\n        // TODO FIXME Start game only after official start signal from server!!\r\n        window.addEventListener('click',function(){\r\n          document.getElementById('game').style.display = 'block';\r\n          document.getElementById('form-placeholder').style.display = 'none';\r\n          startGame();\r\n        })\r\n      }\r\n      form.classList.add('was-validated');\r\n    }, false);\r\n  });\r\n}, false);\r\n\n\n//# sourceURL=webpack:///./src/js/main.js?");

/***/ })

/******/ });